{
  "1-introduction/basic_concepts.html": {
    "href": "1-introduction/basic_concepts.html",
    "title": "Basic concepts | ConsoleAppVisuals",
    "summary": "Basic concepts This section is made for you to understand what is ConsoleAppVisuals, its purpose and use flow. We will also guide you into the creation of your first project until the advanced use of the library with data visualization and menus management. What is ConsoleAppVisuals? The ambition of ConsoleAppVisuals is to provide the best compromise between an easy-to-use library and a complex tool to create console applications with visual elements. The library is designed to be simple to use and to provide a wide range of visual elements to make your console application more stylish and useful. Working principle It is relies on the concept of \"visuals\" which are elements that can be displayed in the console. There are two types of visuals: Passive visuals: elements that do not provide any interaction, you may display several from the same type at the same time Interactive visuals: elements that provide an explicit interaction and create a response that can be collected, you may display only one at a time Animated visuals: in-between passive and interactive visuals, they provide an interaction to stop them but do not require a response, you may display only one at a time. These visuals are stored in Window as a list. From this class, you can display, add, remove, or update the visuals. Each one of the visual element has its rendering method that will be called from the Window class. The basics of the interaction between the library and the console are defined in the Core class. flowchart LR A[Visual elements] -->|Stored in| B[Element List] B -->|From| D[Window Class] D -->|Rendered using| E[Core Class] E -->|Displayed on| F[Console] Use flow When you want to create an element and display it, here is the basic visualization of the use flow of the library: sequenceDiagram participant User participant Element participant Window User->>Element: Creates an Element User->>Window: Adds the Element to the Window User->>Window: Tells the Window to Render the Element Window->>Element: Calls the Element's Render Function In C# terms, the use flow can be interpreted like this: Creating an element: Title exampleTitle = new Title(\"Hello world!\"); Adding it to the Window: Window.AddElement(exampleTitle); Rendering the element: Window.Render(exampleTitle); First steps Now that you have the basic concepts, let's dive into this guided path to learn how to use the library: Create a simple console application Explore element options Discover data visualization Manage multiple menus Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "1-introduction/conclusion.html": {
    "href": "1-introduction/conclusion.html",
    "title": "Next steps | ConsoleAppVisuals",
    "summary": "Next steps Now, you can go further and explore the library by yourself. Here are the resources available: The elements and references sections where you can find all the features available in the library. The examples section where you can find some concrete examples to help you understand how to use the library in real use cases. The articles section where you can find some additional articles (create your element, use fonts, create your documentation, etc.). Stay tuned! The release notes of the latest version are updated regularly. Consider checking it to see if there are any new features or bug fixes to stay up to date. Updating instructions are available here. If you have any questions, feel free to ask them in the discussions section or open an issue (templates are available to help you). Finally, feel free to share around you and star the library on GitHub if you like the project!"
  },
  "1-introduction/data_viz.html": {
    "href": "1-introduction/data_viz.html",
    "title": "Data visualization | ConsoleAppVisuals",
    "summary": "Data visualization In this section, you will: Discover data visualization with TableView, TableSelector and Matrix elements Tip Each subsection is independent. I recommend you to overwrite the Program.cs file with the code of each section to avoid any confusion. The TableView element The TableView element is used to display data in a table format. It is useful when you want to display a list of items with multiple columns. Learn more Let's create a TableView element and add it to the window. Window.Open(); List<string> studentsHeaders = new List<string>() { \"id\", \"name\", \"major\", \"grades\" }; List<string> student1 = new List<string>() { \"01\", \"Theo\", \"Technology\", \"97\" }; List<string> student2 = new List<string>() { \"02\", \"Paul\", \"Mathematics\", \"86\" }; List<string> student3 = new List<string>() { \"03\", \"Maxime\", \"Physics\", \"92\" }; List<string> student4 = new List<string>() { \"04\", \"Charles\", \"Computer Science\", \"100\" }; List<List<string>> studentsData = new List<List<string>>() { student1, student2, student3, student4 }; TableView students = new TableView( \"Students grades\", studentsHeaders, studentsData ); Window.AddElement(students); Window.Render(students); Window.Freeze(); Window.Close(); The TableSelector element The TableSelector element is used to display data in a table format and allow the user to select a row. It is useful when you want to be able to interact with a table. You may use the Up and Down arrows or the Z and S keys to move int the selector. Learn more Here is an example of how to use it: Window.Open(); List<string> playersHeaders = new List<string>() { \"id\", \"first name\", \"last name\", \"nationality\", \"slams\" }; List<string> player1 = new List<string>() { \"01\", \"Novak\", \"Djokovic\", \"Serbia\", \"24\" }; List<string> player2 = new List<string>() { \"02\", \"Carlos\", \"Alkaraz\", \"Spain\", \"2\" }; List<string> player3 = new List<string>() { \"03\", \"Roger\", \"Federer\", \"Switzerland\", \"21\" }; List<string> player4 = new List<string>() { \"04\", \"Rafael\", \"Nadal\", \"Spain\", \"23\" }; List<string> player5 = new List<string>() { \"05\", \"Andy\", \"Murray\", \"England\", \"3\" }; List<string> player6 = new List<string>() { \"06\", \"Daniil\", \"Medvedev\", \"Russia\", \"1\" }; List<string> player7 = new List<string>() { \"07\", \"Stan\", \"Wawrinka\", \"Switzerland\", \"2\" }; List<List<string>> playersData = new List<List<string>> () { player1, player2, player3, player4, player5, player6, player7 }; TableSelector players = new TableSelector( \"Great tennis players\", playersHeaders, playersData ); Window.AddElement(players); // Contrary to the TableView, the TableSelector is interactive, // so we do not have to stop the execution to see it, but to activate it Window.ActivateElement(players); Now let's collect the user interaction response by adding the following code: var response = players.GetResponse(); Dialog playersEmbedResponse = new Dialog( new List<string>() { \"Status: \" + response!.Status, \"You selected the player \" + playersData[response!.Value][2] + \"!\" } ); Window.AddElement(playersEmbedResponse); Window.ActivateElement(playersEmbedResponse); Window.Close(); The Matrix element The Matrix element is used to display data in a matrix format. Learn more Window.Open(); List<int?> firstRow = new List<int?>() { 1, null, 2, 7, 9, 3 }; List<int?> secondRow = new List<int?>() { 4, 5, 6, 8, null, 2 }; List<int?> thirdRow = new List<int?>() { 7, 8, null, 3, 4, 5 }; List<int?> fourthRow = new List<int?>() { null, 2, 3, 4, 5, 6 }; List<List<int?>> data = new List<List<int?>>() { firstRow, secondRow, thirdRow, fourthRow }; Matrix<int?> matrix = new Matrix<int?>(data); Window.AddElement(matrix); Window.Render(matrix); Window.Freeze(); Window.Close(); Conclusion In this tutorial, you learned how to use the TableView, TableSelector and Matrix elements. You are now ready to start the menus management tutorial. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "1-introduction/elements_options.html": {
    "href": "1-introduction/elements_options.html",
    "title": "Elements options | ConsoleAppVisuals",
    "summary": "Elements options In this section, you will learn: How to deactivate/ remove elements How to use the ElementsDashboard inspector element How to use the HeightSpacer element Discover Placement, TextAlignment and BordersType enumerations How to use the full potential of the element options Setup Warning We will add using ConsoleAppVisuals.Enums; to the using statements to use the Placement and TextAlignment enumerations. And your cleaned Program.cs file should look like this: using ConsoleAppVisuals; using ConsoleAppVisuals.PassiveElements; using ConsoleAppVisuals.InteractiveElements; using ConsoleAppVisuals.Enums; namespace MyApp { internal class Program { static void Main(string[] args) { Window.Open(); } } } Disabling elements We tackled adding elements to the window. Now, let's see how to do the opposite. To disable element rendering, you have two options: Deactivate the element Remove the element Deactivating Deactivating an element can be useful for it to be used later. To do so, let's create a Title element and deactivate it. Nothing will be rendered on the screen. Window.Open(); Title title = new Title(\"Elements options\"); Window.AddElement(title); Window.DeactivateElement(title); Window.Render(); Window.Close(); Let's see how to perceive the effect of deactivating an element. Update your code to add a ElementsDashboard passive element and deactivate the title. The dashboard will be rendered, but not the title: Note The method Window.Freeze() is used to stop the execution by waiting the user to press a key (Enter by default) to see the window content without exiting the application when the window only contains passive elements. Window.Open(); Title title = new Title(\"Elements options\"); Window.AddElement(title); ElementsDashboard dashboard = new ElementsDashboard(); Window.AddElement(dashboard); Window.Render(); Window.Freeze(); Window.DeactivateElement(title); Window.Render(); Window.Freeze(); Window.Close(); As you noticed, the title is not rendered on the screen because its Visibility property has been set to false. Removing Removing an element is useful when you don't want to use it anymore. To do so, let's create a Title element and remove it. Nothing will be rendered on the screen. Window.Open(); Title title = new Title(\"Disabling\"); Window.AddElement(title); Window.RemoveElement(title); Window.Render(); Window.Close(); Let's see how to perceive the effect of removing an element. Update your code to the following: Window.Open(); Title title = new Title(\"Disabling\"); Window.AddElement(title); ElementsDashboard dashboard = new ElementsDashboard(); Window.AddElement(dashboard); Window.Render(); Window.Freeze(); Window.RemoveElement(title); Window.Render(); Window.Freeze(); Window.Close(); Setting a height spacer between elements Sometimes, you may want to add a space between elements. To do so, you can use the HeightSpacer element. It is a passive element that will only render a space of a specific height between elements. Here is a concrete example between two banners: Window.Open(); Title title = new Title(\"Elements options\"); Window.AddElement(title); Banner banner1 = new Banner(); HeightSpacer spacer = new HeightSpacer(5); Banner banner2 = new Banner(); Window.AddElement(banner1, spacer, banner2); Window.Render(); Window.Freeze(); Window.Close(); Note You may update afterward the Placement and Height of the HeightSpacer element using the UpdatePlacement() and UpdateHeight() methods. Access and update elements parameters In all the tutorials and the example project the elements definitions are simplified and do not declare all the arguments available. To see all the arguments available for each element, you can consult the references documentation. Most of them are specific with generic type (string, int, bool, List, ...) and are used to customize the element. But some of them are common to all elements and are used to place the element on the window. These are the Placement and TextAlignment enumerations. Placement The Placement enumeration is used to place elements at a convenient location on the window. It is used by every element from the library that can be placed on the window. According to the placement, the element position and line will be calculated and rendered. The available values are: TopLeft: x(line) = 0, y(char) = 0 TopCenter: (Default) x(line) = 0, y(char) = windowWidth / 2 TopRight: x(line) = 0, y(char) = windowWidth TopCenterFullWidth: x(line) = 0, y(char) = 0 (In fact, it is the same as TopLeft but we know that the element will be rendered with the full width of the window, following top elements will be placed below it) BottomCenterFullWidth: x(line) = windowHeight, y(char) = 0 (In preview for now as not fully implemented) Note To choose the placement of an element, you can either set it from the constructor or use the UpdatePlacement() method after creating the element. Prompt prompt = new Prompt(\"Enter your name:\", \"John\", Placement.TopCenter); // or prompt.UpdatePlacement(Placement.TopCenter); TextAlignment The TextAlignment enumeration is used to align the text in a string. It is used by some elements from the library. Here are the available values: Left: Align the text to the left Center: (Default) Align the text to the center Right: Align the text to the right Note To choose the text alignment of an element, you can either set it from the constructor or use the UpdateTextAlignment() method after creating the element (some elements may not have this method if the text alignment is not used in it so refer to the references documentation to get that specific information). Dialog dialog = new Dialog(new List<string>(){\"Demo\", \"This is a message\"}, null, \"OK ▶\", TextAlignment.Center); // or dialog.UpdateTextAlignment(TextAlignment.Center); BordersType The BordersType enumeration is used to set the borders of an element. It is used by the table and embed elements from the library. Here are the available values: SingleStraight: (Default) Single lines with straight corners SingleRound: Single lines with round corners SingleBold: Single bold lines with straight corners DoubleStraight: Double lines with straight corners ASCII: ASCII basic characters for the borders (+, -, | only) Warning The following types may not work on Visual Studio or Windows Command Prompt: SingleRound SingleBold Note To choose the border type of an element, you can either set it from the constructor or use the UpdateBordersType() method after creating the element (some elements may not have this method if the border type is not used in it so refer to the references documentation to get that specific information). ElementsDashboard dashboard = new ElementsDashboard(Placement.TopCenter, BordersType.SingleStraight); // or dashboard.UpdateBordersType(BordersType.SingleStraight); Conclusion In this section, you learned how to deactivate and remove elements from the window. You also discovered the Placement and TextAlignment enumerations and how to use the full potential of the element options by knowing all the arguments available. You may now be able to use more complex elements and place them at your desired location. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "1-introduction/first_app.html": {
    "href": "1-introduction/first_app.html",
    "title": "First app | ConsoleAppVisuals",
    "summary": "First app This tutorial will show you how to create a simple console application using the ConsoleAppVisuals package. You will learn: How to add elements Discover: Title, Header, Footer, FakeLoadingBar, Prompt and finally Dialog elements How to get the response from the user How to exit the application Setup First, let's create a dummy project to work with. Please choose your method according to your preference: .NET CLI Visual Studio Open your terminal and navigate to the folder where you want to create your project. Run the following command: dotnet new console --output MyApp --use-program-main If your file structure is like this: Example_project <-- root └───MyApp ├───obj ├───MyApp.csproj └───Program.cs Jump into the MyApp folder: cd MyApp Finally, run the following command to install the library: dotnet add package ConsoleAppVisuals Tip Consider running the same command to update the package to the latest version, stay tuned! If you are using Visual Studio, launch the app and follow these steps in the video to create a new project: Then, install the ConsoleAppVisuals package by following these steps in the video and searching for ConsoleAppVisuals. Warning The video is about the Newtonsoft.Json package. You need to search for ConsoleAppVisuals package instead. Tip Consider updating the package often to the latest version, stay tuned! More info on this page. Open the Program.cs file and ensure that the content is the following: namespace MyApp { internal class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } } .NET CLI Visual Studio Let's try to run the app by typing the following command in your terminal: dotnet run Let's try to run the app by clicking on the green arrow at the top of the window. Building the app Warning Add these using statements at the top of your Program.cs file to use the ConsoleAppVisuals package and its elements: using ConsoleAppVisuals; using ConsoleAppVisuals.PassiveElements; using ConsoleAppVisuals.InteractiveElements; using ConsoleAppVisuals.AnimatedElements; Sometimes, you will need to add more statements. All available namespaces are available in the references section. Let's start by removing Console.WriteLine(\"Hello World!\"); instruction and adding the following line to your Main method to set up the console (clear and set the cursor invisible): Window.Open(); Now, let's create a minimal app with a Title, a Header, a Footer, a FakeLoadingBar and finally a Prompt element. Title Now we can use all the elements from the package. Our first passive element will be a Title. Learn more Title title = new Title(\"My first app\"); Then we can add it to the Window: Window.AddElement(title); And finally, we can render the Title from the Window: Window.Render(title); Tip You may update the style of the Title element like the one below by giving a look at this article: create and use fonts. Header, Footer Add the Header and Footer passive elements to the Window: Header header = new Header(); Footer footer = new Footer(); Window.AddElement(header, footer); Window.Render(); Instead of rendering each element separately, we rendered the Title, Header and Footer elements at once using the Window.Render() method. So you may remove the Window.Render(title) instruction. FakeLoadingBar Now let's add a FakeLoadingBar animated element to your previous code and run it. Learn more FakeLoadingBar loadingBar = new FakeLoadingBar(); Window.AddElement(loadingBar); Window.Render(loadingBar); Warning As you may have noticed, we have the same output as earlier. No loading bar was rendered on the console. Passive elements are activated by default when added to the window. On the contrary, interactive and animated elements need to be activated manually. To do so, replace the Window.Render(loadingBar) instruction with the following: Window.ActivateElement(loadingBar); Tip The method Window.ActivateElement() will activate the element and render it on the console. Do not forget to write Window.Render() before to render the other passive elements like Title, Header or Footer for example. Prompt Now let's add a Prompt interactive element to your previous code and run it. Learn more Prompt prompt = new Prompt(\"What's your name?\"); Window.AddElement(prompt); Window.ActivateElement(prompt); Get response and Dialog element A Prompt element will give you different interaction information. To get these information, let's add the following line of code after the Window.ActivateElement(prompt) line. Learn more about var var response = prompt.GetResponse(); The previous line will retrieve a response object that has the following properties: Status: is how the interaction ended. It can be Selected (pressed enter), Deleted (pressed delete) or Escaped (pressed escape). It is accessible using: response?.Status. Value: is the user's response data. Its type depends on the InteractiveElement you are using. In this case, the Prompt element returns a string. It is accessible using: response?.Value. flowchart LR A[Prompt] --> B[response] B -->|how the user exit| C[response?.Status] B -->|what is output value| D[response?.Value] C -->|can be displayed using| E[Visual Elements] D -->|can be displayed using| E Note Here we use the ?. operator to avoid a NullReferenceException if the response is null. Meaning: If response is null, response?.Status will return null. If response is not null, response?.Status will return response.Status. If you are certain that response is not null, you can use response!.Status directly. This will indicate to the compiler that response cannot be null in your configuration. Finally, let's add a Dialog interactive element to display the user's response on the console.The Dialog is interactive too and will give you a response. You may catch it if needed (as you may create an element with 0, 1 or 2 options, it will give you the selected option). Learn more Dialog text = new Dialog( new List<string>() { \"You just wrote \" + response!.Value + \"!\", \"And you \" + response!.Status + \"!\" }, null, \"OK\" ); Window.AddElement(text); Window.ActivateElement(text); Exit the application Finally, let's exit smoothly the application: Window.Close(); Conclusion And that's it! You have created your first app using the ConsoleAppVisuals package. You can now run the app and see the result. Here is the full code: Window.Open(); Title title = new Title(\"My first app\"); Window.AddElement(title); Header header = new Header(); Footer footer = new Footer(); Window.AddElement(header, footer); Window.Render(); FakeLoadingBar loadingBar = new FakeLoadingBar(); Window.AddElement(loadingBar); Window.ActivateElement(loadingBar); Prompt prompt = new Prompt(\"What's your name?\"); Window.AddElement(prompt); Window.ActivateElement(prompt); var response = prompt.GetResponse(); Dialog text = new Dialog( new List<string>() { \"You just wrote \" + response!.Value + \"!\", \"And you \" + response!.Status + \"!\" }, null, \"OK\" ); Window.AddElement(text); Window.ActivateElement(text); Window.Close(); Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "1-introduction/menus_management.html": {
    "href": "1-introduction/menus_management.html",
    "title": "Menus management | ConsoleAppVisuals",
    "summary": "Menus management In this section, you will learn: How to create a menu using the ScrollingMenu element Collect & manage their output Tip Each subsection is independent. I recommend you to overwrite the Program.cs file with the code of each section to avoid any confusion. The ScrollingMenu element The ScrollingMenu interactive element is an historic element of the library. Some features about it changed over time but the principle has remain the same for a year. It is used to display a list of items and allow the user to select one or several items. Learn more Here is a minimal example of how to use it: Window.Open(); string[] options = new string[] { \"Option 0\", \"Option 1\", \"Option 2\" }; ScrollingMenu menu = new ScrollingMenu( \"Please choose an option among those below.\", 0, Placement.TopCenter, options ); Window.AddElement(menu); // the ScrollingMenu is an interactive element, so we need to activate it Window.ActivateElement(menu); // The ScrollingMenu will return an int as a value (represents the index of the selected item) var responseMenu = menu.GetResponse(); Dialog embedResponse = new Dialog( new List<string>() { $\"The user: {responseMenu!.Status}\", $\"Index: {responseMenu!.Value}\", // We find the option selected by the user from the index $\"Which corresponds to: {options[responseMenu!.Value]}\" } ); Window.AddElement(embedResponse); Window.ActivateElement(embedResponse); Window.Close(); Manage menu status The most practical way to manage actions according the the outcome of the ScrollingMenu is a switch-case statement. Learn more Here is a basic example where we display a custom message according to the user's action (pressing Enter, Escape or Delete): Window.Open(); string[] options = new string[] { \"Option 0\", \"Option 1\", \"Option 2\" }; ScrollingMenu menu = new ScrollingMenu( \"Please choose an option among those below.\", 0, Placement.TopCenter, options ); Window.AddElement(menu); Window.ActivateElement(menu); var response = menu.GetResponse(); switch (response!.Status) { case Status.Selected: Dialog embedSelected = new Dialog( new List<string>() { \"The user pressed the Enter key\", } ); Window.AddElement(embedSelected); Window.ActivateElement(embedSelected); Window.RemoveElement(embedSelected); break; case Status.Escaped: Dialog embedEscaped = new Dialog( new List<string>() { \"The user pressed the Escape key\", } ); Window.AddElement(embedEscaped); Window.ActivateElement(embedEscaped); Window.RemoveElement(embedEscaped); break; case Status.Deleted: Dialog embedDeleted = new Dialog( new List<string>() { \"The user pressed the Delete key\", } ); Window.AddElement(embedDeleted); Window.ActivateElement(embedDeleted); Window.RemoveElement(embedDeleted); break; } Window.Close(); Manage menu value As we mentioned earlier, the ScrollingMenu returns an int as a value. This value represents the index of the selected item. You may use it to act differently according to the selected item. Here we decide to act differently when the user selects an item and quit the app otherwise: Window.Open(); string[] options = new string[] { \"Play\", \"Settings\", \"Quit\" }; ScrollingMenu menu = new ScrollingMenu( \"Please choose an option among those below.\", 0, Placement.TopCenter, options ); Window.AddElement(menu); Window.ActivateElement(menu); var response = menu.GetResponse(); switch (response!.Status) { case Status.Selected: switch (response.Value) { case 0: Dialog play = new Dialog( new List<string>() { \"Playing...\" } ); Window.AddElement(play); Window.ActivateElement(play); Window.RemoveElement(play); break; case 1: Dialog settings = new Dialog( new List<string>() { \"Consulting the settings...\" } ); Window.AddElement(settings); Window.ActivateElement(settings); Window.RemoveElement(settings); break; case 2: // Quit the app Window.Close(); break; } break; case Status.Escaped: case Status.Deleted: // Quit the app anyway Window.Close(); break; } Window.Close(); That way, you may act differently depending on the selected item and create useful menu without too much effort. Conclusion In this section, you learned how to create a menu using the ScrollingMenu element, collect and manage their output. Now let's jump to the final section! Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "2-elements/animated.html": {
    "href": "2-elements/animated.html",
    "title": "Animated | ConsoleAppVisuals",
    "summary": "Animated Visual Description Documentation The FakeLoadingBar is used to create a static loading bar with a defined duration. Read more The LoadingBar class is used to create a dynamic loading bar. It is a simple animated element that you may use to show the progress of a task. Read more Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "2-elements/index.html": {
    "href": "2-elements/index.html",
    "title": "Table of content | ConsoleAppVisuals",
    "summary": "Table of content In this section, you will find the list of all the elements available in the library. They will be accompanied by a brief description and a link to their respective documentation page. They are divided into three categories: Passive: the default elements, which do not require any specific action from the user. Interactive: like a menu or prompt, these elements require user input and interaction. Animated: elements that are animated, like a progress bar. Note An article is available to help you create your own elements. You can find it here. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "2-elements/interactive.html": {
    "href": "2-elements/interactive.html",
    "title": "Interactive | ConsoleAppVisuals",
    "summary": "Interactive Visual Description Documentation The Dialog is interaction box providing 0, 1 or 2 options to the user. Read more The FloatSelector display a roulette letting you choose a number given a range and a step. Read more Very similar to the FloatSelector, the IntSelector is used to select an integer. Read more The Prompt is a simple input box that allows the user to enter a string (Different input types available for secrecy for example). Read more The ScrollingMenu is a menu that allows the user to scroll through a list of choices. Read more The TableSelector is a table that allows the user to select a row. Read more Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "2-elements/passive.html": {
    "href": "2-elements/passive.html",
    "title": "Passive | ConsoleAppVisuals",
    "summary": "Passive Classic elements Visual Description Documentation The Text is a simple text element that can be used to display information to the user. Read more The EmbedText is a text element that has been embed. Nothing more. Read more The Title is a text element that can be used to display a title at the top of the console. (You may change the font) Read more The Banner is a text element that can be used to display a banner. Read more The Header is a banner placed at the top of the console. Read more The Footer is a banner placed at the bottom of the console Read more The HeightSpacer is a passive element that can be used to add a vertical space. Read more The TableView is a passive element that can be used to display a table. (You may change the style fo the borders) Read more The Matrix is a passive element that can be used to display a matrix. (You may also change its style) Read more The ASCIIArt is a passive element that can be used to display an ASCII artwork composed of multiple string lines. Read more \"Inspectors\" elements These are debugging elements and should not be used in a production environment. They are not very customizable and are intended to be used for debugging purposes only. Visual Description Documentation The ElementsDashboard is a passive element that can be used to display the list of elements currently stored in the Window. Read more The ElementsList is a passive element that can be used to display the list of elements currently available (from the library or the local project). You may select the type expected (Default, Passive, Interactive or Animated). Read more Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "3-references/ConsoleAppVisuals.AnimatedElements.FakeLoadingBar.html": {
    "href": "3-references/ConsoleAppVisuals.AnimatedElements.FakeLoadingBar.html",
    "title": "Class FakeLoadingBar | ConsoleAppVisuals",
    "summary": "Class FakeLoadingBar Namespace ConsoleAppVisuals.AnimatedElements Assembly ConsoleAppVisuals.dll The FakeLoadingBar is an animated element that simulates a loading bar with a fixed duration. public class FakeLoadingBar : AnimatedElement Inheritance object Element AnimatedElement FakeLoadingBar Inherited Members AnimatedElement.RenderOptionsAfterHand() AnimatedElement.Type AnimatedElement.MaxNumberOfThisElement Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors FakeLoadingBar(string, int, Placement, int, int, BordersType) The FakeLoadingBar is an animated element that simulates a loading bar with a fixed duration. public FakeLoadingBar(string text = \"Loading ...\", int barWidth = 0, Placement placement = Placement.TopCenter, int processDuration = 2000, int additionalDuration = 1000, BordersType bordersType = BordersType.SingleStraight) Parameters text string The text of the loading bar. barWidth int The width of the loading bar. If 0 or less than text length, text length is used. placement Placement The placement of the loading bar. processDuration int The duration of the loading bar. additionalDuration int The additional duration of the loading bar at the end. bordersType BordersType The type of borders to display around the loading bar. Remarks For more information, consider visiting the documentation available here. Properties AdditionalDuration Gets the additional duration of the loading bar at the end. public int AdditionalDuration { get; } Property Value int BarWidth Gets the explicit width of the loading bar. public int BarWidth { get; } Property Value int Borders Gets the borders of the loading bar. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the loading bar. public BordersType BordersType { get; } Property Value BordersType Height Gets the height of the loading bar. public override int Height { get; } Property Value int Placement Gets the placement of the loading bar. public override Placement Placement { get; } Property Value Placement ProcessDuration Gets the duration of the loading bar. public int ProcessDuration { get; } Property Value int Text Gets the text of the loading bar. public string Text { get; } Property Value string Width Gets the width of the loading bar. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateAdditionalDuration(int) Updates the additional duration of the loading bar. public void UpdateAdditionalDuration(int additionalDuration) Parameters additionalDuration int The new additional duration of the loading bar. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException The additional duration of the loading bar cannot be negative. UpdateBarWidth(int) Updates the width of the loading bar. public void UpdateBarWidth(int barWidth) Parameters barWidth int The new width of the loading bar. If 0, text length is used. Remarks For more information, consider visiting the documentation available here. UpdateBordersType(BordersType) Updates the borders type of the loading bar. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new border type of the loading bar. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the loading bar. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the loading bar. Remarks For more information, consider visiting the documentation available here. UpdateProcessDuration(int) Updates the duration of the loading bar. public void UpdateProcessDuration(int processDuration) Parameters processDuration int The new duration of the loading bar. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Throw when the process duration is negative. UpdateText(string) Updates the text of the loading bar. public void UpdateText(string text) Parameters text string The new text of the loading bar. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.AnimatedElements.LoadingBar.html": {
    "href": "3-references/ConsoleAppVisuals.AnimatedElements.LoadingBar.html",
    "title": "Class LoadingBar | ConsoleAppVisuals",
    "summary": "Class LoadingBar Namespace ConsoleAppVisuals.AnimatedElements Assembly ConsoleAppVisuals.dll The LoadingBar is a passive element that displays a loading bar using a reference to a progress variable. public class LoadingBar : AnimatedElement Inheritance object Element AnimatedElement LoadingBar Inherited Members AnimatedElement.RenderOptionsAfterHand() AnimatedElement.Type AnimatedElement.MaxNumberOfThisElement Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors LoadingBar(string, ref float, Placement, int) The LoadingBar is a passive element that displays a loading bar using a reference to a progress variable. public LoadingBar(string text, ref float progress, Placement placement = Placement.TopCenter, int additionalDuration = 1000) Parameters text string The text of the loading bar. progress float The reference of the progress of the loading bar (that means that you should put a reference to a variable that will contain the percentage of progress of your process). placement Placement The placement of the loading bar. additionalDuration int The duration of the loading bar after the process. Remarks For more information, consider visiting the documentation available here. Properties AdditionalDuration Gets the additional duration of the loading bar at the end. public int AdditionalDuration { get; } Property Value int Height Gets the height of the loading bar. public override int Height { get; } Property Value int Remarks One line for the text,one line for the space between and one line for the progress. Placement Gets the placement of the loading bar. public override Placement Placement { get; } Property Value Placement Progress Gets the progress of the loading bar. public float Progress { get; } Property Value float Text Gets the text of the loading bar. public string Text { get; } Property Value string Width Gets the width of the loading bar. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateAdditionalDuration(int) Updates the additional duration of the loading bar. public void UpdateAdditionalDuration(int additionalDuration) Parameters additionalDuration int The new additional duration of the loading bar. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException The additional duration of the loading bar cannot be negative. UpdatePlacement(Placement) Updates the placement of the loading bar. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the loading bar. Remarks For more information, consider visiting the documentation available here. UpdateProgress(float) Updates the progress of the loading bar. public void UpdateProgress(float progress) Parameters progress float The new progress of the loading bar. Remarks For more information, consider visiting the documentation available here. UpdateText(string) Updates the text of the loading bar. public void UpdateText(string text) Parameters text string The new text of the loading bar. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.AnimatedElements.html": {
    "href": "3-references/ConsoleAppVisuals.AnimatedElements.html",
    "title": "Namespace ConsoleAppVisuals.AnimatedElements | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.AnimatedElements Classes FakeLoadingBar The FakeLoadingBar is an animated element that simulates a loading bar with a fixed duration. LoadingBar The LoadingBar is a passive element that displays a loading bar using a reference to a progress variable."
  },
  "3-references/ConsoleAppVisuals.Attributes.VisualAttribute.html": {
    "href": "3-references/ConsoleAppVisuals.Attributes.VisualAttribute.html",
    "title": "Class VisualAttribute | ConsoleAppVisuals",
    "summary": "Class VisualAttribute Namespace ConsoleAppVisuals.Attributes Assembly ConsoleAppVisuals.dll The VisualAttribute class is used to mark a class, struct, enum, constructor, method, property, field, event, interface, or delegate as a visual and so interact with the console. [AttributeUsage(AttributeTargets.All, Inherited = false)] public sealed class VisualAttribute : Attribute Inheritance object Attribute VisualAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks [ WARNING ] This element cannot be tested. Constructors VisualAttribute() The VisualAttribute class is used to mark a class, struct, enum, constructor, method, property, field, event, interface, or delegate as a visual and so interact with the console. public VisualAttribute() Remarks For more information, refer to the following resources: Documentation Example Project VisualAttribute(string?) The VisualAttribute class is used to mark a class, struct, enum, constructor, method, property, field, event, interface, or delegate as a visual and so interact with the console. public VisualAttribute(string? message) Parameters message string The text string that describes alternative workarounds. Remarks For more information, refer to the following resources: Documentation Example Project VisualAttribute(string?, bool) The VisualAttribute class is used to mark a class, struct, enum, constructor, method, property, field, event, interface, or delegate as a visual and so interact with the console. public VisualAttribute(string? message, bool error) Parameters message string The text string that describes alternative workarounds. error bool True if the visual element usage generates a compiler error; false if it generates a compiler warning. Remarks For more information, refer to the following resources: Documentation Example Project Properties DiagnosticId Gets or sets the ID that the compiler will use when reporting a use of the API. public string? DiagnosticId { get; set; } Property Value string IsError Gets a value that indicates whether the compiler will treat usage of the visual program element as an error. public bool IsError { get; } Property Value bool True if the visual element usage is considered an error; otherwise, false. The default is false. Message Gets the workaround message. public string? Message { get; } Property Value string The workaround text string. UrlFormat Gets or sets the URL for corresponding documentation. The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID. public string? UrlFormat { get; set; } Property Value string The format string that represents a URL to corresponding documentation."
  },
  "3-references/ConsoleAppVisuals.Attributes.html": {
    "href": "3-references/ConsoleAppVisuals.Attributes.html",
    "title": "Namespace ConsoleAppVisuals.Attributes | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.Attributes Classes VisualAttribute The VisualAttribute class is used to mark a class, struct, enum, constructor, method, property, field, event, interface, or delegate as a visual and so interact with the console."
  },
  "3-references/ConsoleAppVisuals.Core.html": {
    "href": "3-references/ConsoleAppVisuals.Core.html",
    "title": "Class Core | ConsoleAppVisuals",
    "summary": "Class Core Namespace ConsoleAppVisuals Assembly ConsoleAppVisuals.dll The Core class is a collection of low-level methods responsible of all the interactions between the library and the console (e.g. changing colors, writing text, etc.). public static class Core Inheritance object Core Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Fields NEGATIVE_ANCHOR Defines the negative anchor to put inside a string to be recognized as negative. The following line will put \" negative \" in negative on the screen and not print the \"/neg\" anchors. string str = \"This is a /neg negative /neg string\"; public const string NEGATIVE_ANCHOR = \"/neg\" Field Value string Properties ColorPanel Gets the current color panel used in the console. public static (ConsoleColor, ConsoleColor) ColorPanel { get; } Property Value (ConsoleColor, ConsoleColor) InitialColorPanel Gets the initial color panel of the console. public static (ConsoleColor, ConsoleColor) InitialColorPanel { get; } Property Value (ConsoleColor, ConsoleColor) Methods ApplyNegative(bool) Switches the font and background colors of the console in order to apply a negative to highlight the text. [Visual] public static void ApplyNegative(bool negative = false) Parameters negative bool If true, the text is highlighted. Remarks For more information, consider visiting the documentation available here. BannerToString((string, string, string)) Converts a banner tuple into a string. [Visual] public static string BannerToString(this (string, string, string) banner) Parameters banner (string, string, string) The banner tuple. Returns string Converts the banner to a string. Remarks For more information, consider visiting the documentation available here. ClearMultiplePositionedLines(Placement, int, params string[]) Clears a multiple lines in the console given a certain starting line. [Visual] public static void ClearMultiplePositionedLines(Placement placement, int line, params string[] text) Parameters placement Placement The placement of the paragraph. line int The height of the paragraph. text string[] The lines of the paragraph. Remarks For more information, consider visiting the documentation available here. GetRandomColor() Gets a random color from a list of predefined colors (the default ones). public static ConsoleColor GetRandomColor() Returns ConsoleColor A random color. Remarks For more information, consider visiting the documentation available here. GetRangeAndRemoveNegativeAnchors(string) Gets the range of a negative sequence in a string and remove the negative anchors. public static (string, (int, int)?) GetRangeAndRemoveNegativeAnchors(this string str) Parameters str string The string to check. Returns (string, (int, int)?) The string without the negative anchors and the range of the negative sequence. Remarks For more information, consider visiting the documentation available here. InsertString(string, string, TextAlignment) Inserts a specified string into another string, at a specified position. public static string InsertString(this string inserted, string toInsert, TextAlignment align = TextAlignment.Center) Parameters inserted string The string that receives the other. toInsert string The string to insert. align TextAlignment The alignment of the string to insert. Returns string The final string after computing. Remarks For more information, consider visiting the documentation available here. IsScreenUpdated() Checks if the screen has been updated (colors or dimensions have changed) [Visual] public static bool IsScreenUpdated() Returns bool True if the screen has been updated, false otherwise. Remarks For more information, consider visiting the documentation available here. LoadSavedColorPanel() Loads the saved color panel (consider saving it beforehand) [Visual] public static void LoadSavedColorPanel() Remarks For more information, consider visiting the documentation available here. LoadTerminalColorPanel() Loads the terminal color panel. [Visual] public static void LoadTerminalColorPanel() Remarks For more information, consider visiting the documentation available here. ResizeString(string, int, TextAlignment, bool) Builds a new string with a specific size and a specific placement. public static string ResizeString(this string str, int size, TextAlignment align = TextAlignment.Center, bool truncate = true) Parameters str string The string to build. size int The size of the string. align TextAlignment The alignment of the string. truncate bool If true, the string is truncated if it is too long. Returns string The built string. Remarks For more information, consider visiting the documentation available here. RestoreColorPanel() Restores the default colors of the console with the initial color panel. [Visual] public static void RestoreColorPanel() Remarks For more information, consider visiting the documentation available here. SaveColorPanel() Saves the current color panel in a variable. [Visual] public static void SaveColorPanel() Remarks For more information, consider visiting the documentation available here. SetBackgroundColor(ConsoleColor) Changes the background color of the console. [Visual] public static void SetBackgroundColor(ConsoleColor color) Parameters color ConsoleColor The new background color. Remarks For more information, consider visiting the documentation available here. SetConsoleColors() Set the console colors to the Core variables associated. It does not change the actual colors of the console. [Visual] public static void SetConsoleColors() Remarks For more information, consider visiting the documentation available here. SetConsoleDimensions() Set the dimensions of the console to the Core variables associated. It does not change the actual dimensions of the console. [Visual] public static void SetConsoleDimensions() Remarks For more information, consider visiting the documentation available here. SetForegroundColor(ConsoleColor) Changes the foreground color of the console. [Visual] public static void SetForegroundColor(ConsoleColor color) Parameters color ConsoleColor The new color. Remarks For more information, consider visiting the documentation available here. ToPlacement(TextAlignment) Converts a TextAlignment into a Placement. public static Placement ToPlacement(this TextAlignment align) Parameters align TextAlignment The alignment to convert. Returns Placement The converted alignment. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the alignment is not valid. ToTextAlignment(Placement) Converts a Placement into a TextAlignment. public static TextAlignment ToTextAlignment(this Placement placement) Parameters placement Placement The placement to convert. Returns TextAlignment The converted placement. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the placement is not valid. WriteContinuousString(string, int?, bool, int, int, int?, TextAlignment, Placement) Writes a string continuously in the console. The string is written letter by letter on the console. [Visual] public static void WriteContinuousString(string str, int? line, bool negative = false, int printTime = 2000, int additionalTime = 1000, int? length = null, TextAlignment align = TextAlignment.Center, Placement placement = Placement.TopCenter) Parameters str string The string to write. line int? The line where the string is written in the console. If null, will be written where the cursor is. negative bool If true, the text is highlighted. printTime int The total time to write the string in ms. additionalTime int The additional time to wait after the string is written in ms. length int? The length of the string. If null, the length is the window width. align TextAlignment The alignment of the string. placement Placement The placement of the string. Remarks For more information, consider visiting the documentation available here. WriteDebugMessage(Placement, params string[]) [Debugging purposes] It overwrites any text in the console at a specified placement to display a debug message. [Visual] public static void WriteDebugMessage(Placement placement = Placement.TopRight, params string[] lines) Parameters placement Placement The placement of the debug message. lines string[] The text to display. Remarks For more information, consider visiting the documentation available here. WriteMultiplePositionedLines(bool, TextAlignment, Placement, bool, int?, params string[]) Writes multiple lines in the console given a certain placement and line. [Visual] public static void WriteMultiplePositionedLines(bool equalizeLengths = true, TextAlignment align = TextAlignment.Center, Placement placement = Placement.TopCenter, bool negative = false, int? line = null, params string[] text) Parameters equalizeLengths bool Whether or not the lines of the paragraph should be equalized to the same length. align TextAlignment The alignment of the paragraph. placement Placement The placement of the paragraph. negative bool If true, the paragraph is printed in the negative colors. line int? The height of the paragraph. text string[] The lines of the paragraph. Remarks For more information, consider visiting the documentation available here. WritePositionedString(string, Placement, bool, int?, bool) Writes a string in the console given a certain placement and line. [Visual] public static void WritePositionedString(string str, Placement placement = Placement.TopCenter, bool negative = false, int? line = null, bool writeLine = false) Parameters str string The string to write. placement Placement The placement of the string in the console. negative bool If true, the text is highlighted. line int? The line where the string is written in the console. If null, will be written where the cursor is. writeLine bool If true, the string is written with a line break. Remarks For more information, consider visiting the documentation available here. WritePositionedStyledText(string[]?, int?, int?, int?, TextAlignment, bool) Writes a styled text in the console. The height will depend on the font used. Font enum for details. [Visual] public static void WritePositionedStyledText(string[]? text = null, int? line = null, int? width = null, int? margin = null, TextAlignment align = TextAlignment.Center, bool negative = false) Parameters text string[] The styled string to write. line int? The line where the string is written in the console. If null, will be written from the ContentHeight. width int? The width of the string. If null, the width is the window width. margin int? The upper and lower margin. align TextAlignment The alignment of the string. negative bool If true, the text is highlighted. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.BordersType.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.BordersType.html",
    "title": "Enum BordersType | ConsoleAppVisuals",
    "summary": "Enum BordersType Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The BordersType enum defines the type of border to use for embed elements. public enum BordersType Fields ASCII = 4 ASCII borders (+-|+++++) Universal compatibility. DoubleStraight = 3 Double line borders with straight corners (╔╗╚╝═║╦╩╠╣╬) Universal compatibility. SingleBold = 2 Single line borders with bold lines (┏┓┗┛━┃┳┻┣┫╋) May not be supported on PowerShell (Windows). SingleRound = 1 Single line borders with rounded corners (╭╮╰╯─│┬┴├┤┼) May not be supported on PowerShell (Windows). SingleStraight = 0 Single line borders with straight corners (┌┐└┘─│┬┴├┤┼) Universal compatibility. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.DialogOption.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.DialogOption.html",
    "title": "Enum DialogOption | ConsoleAppVisuals",
    "summary": "Enum DialogOption Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The DialogOption enum defines the outputs of a dialog. public enum DialogOption Fields Left = 1 Left option selected. None = 0 No options are set or escape pressed. Right = 2 Right option selected. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.Direction.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.Direction.html",
    "title": "Enum Direction | ConsoleAppVisuals",
    "summary": "Enum Direction Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The Direction enum defines the direction in some space. public enum Direction Fields Down = 1 The down direction. Up = 0 The up direction. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.ElementType.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.ElementType.html",
    "title": "Enum ElementType | ConsoleAppVisuals",
    "summary": "Enum ElementType Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The ElementType enum defines the type of an element. public enum ElementType Fields Animated = 3 The animated element type. Default = 0 The default element type, not regarding wether it is passive or interactive. Interactive = 2 The interactive element type. Passive = 1 The passive element type. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.Font.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.Font.html",
    "title": "Enum Font | ConsoleAppVisuals",
    "summary": "Enum Font Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The Font enum defines the font used to display styled text. (Used in the Title element) public enum Font Fields ANSI_Shadow = 1 Author: Unknown, Height: 6 Big = 6 Author: Glenn Chappell, Height: 8 Bloody = 5 Author: Unknown, Height: 8 Bulbhead = 2 Author: Jef Poskanzer, Height: 4 Custom = 0 Font defined by the user. Ghost = 3 Author: myflix, Height: 9 Lil_Devil = 7 Author: myflix, Height: 8 Merlin = 4 Author: LG Beard, Height: 8 Stop = 8 Author: David Walton, Height: 7 Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.Placement.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.Placement.html",
    "title": "Enum Placement | ConsoleAppVisuals",
    "summary": "Enum Placement Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The Placement enum defines the placement of a string in some space. It could be another string or a console line. public enum Placement Extension Methods Core.ToTextAlignment(Placement) Fields BottomCenterFullWidth = 4 The object is placed in the bottom center of the space and takes all the width. TopCenter = 0 The object is placed in the top center of the space. TopCenterFullWidth = 3 The object is placed in the top center of the space and takes all the width. TopLeft = 1 The object is placed in the top left of the space. TopRight = 2 The object is placed in the top right of the space. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.PromptInputStyle.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.PromptInputStyle.html",
    "title": "Enum PromptInputStyle | ConsoleAppVisuals",
    "summary": "Enum PromptInputStyle Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The PromptInputStyle enum defines the style of the prompt input. public enum PromptInputStyle Fields Default = 0 The default prompt style. Fill = 1 The form style. (the default text will be \"----\" for 4 characters) Secret = 2 The secret style. (the input will be hidden with \"*\" characters) Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.Status.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.Status.html",
    "title": "Enum Status | ConsoleAppVisuals",
    "summary": "Enum Status Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The Status enum represents the exit status of an interaction. public enum Status Fields Deleted = 1 Pressed the delete key. Escaped = 2 Pressed the escape key. Selected = 0 Pressed the enter key. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.TextAlignment.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.TextAlignment.html",
    "title": "Enum TextAlignment | ConsoleAppVisuals",
    "summary": "Enum TextAlignment Namespace ConsoleAppVisuals.Enums Assembly ConsoleAppVisuals.dll The TextAlignment enum defines the alignment of a string in the space. public enum TextAlignment Extension Methods Core.ToPlacement(TextAlignment) Fields Center = 0 The string is placed in the center of the space. Left = 1 The string is placed on the left of the space. Right = 2 The string is placed on the right of the space. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Enums.html": {
    "href": "3-references/ConsoleAppVisuals.Enums.html",
    "title": "Namespace ConsoleAppVisuals.Enums | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.Enums Enums BordersType The BordersType enum defines the type of border to use for embed elements. DialogOption The DialogOption enum defines the outputs of a dialog. Direction The Direction enum defines the direction in some space. ElementType The ElementType enum defines the type of an element. Font The Font enum defines the font used to display styled text. (Used in the Title element) Placement The Placement enum defines the placement of a string in some space. It could be another string or a console line. PromptInputStyle The PromptInputStyle enum defines the style of the prompt input. Status The Status enum represents the exit status of an interaction. TextAlignment The TextAlignment enum defines the alignment of a string in the space."
  },
  "3-references/ConsoleAppVisuals.Errors.DuplicateElementException.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.DuplicateElementException.html",
    "title": "Class DuplicateElementException | ConsoleAppVisuals",
    "summary": "Class DuplicateElementException Namespace ConsoleAppVisuals.Errors Assembly ConsoleAppVisuals.dll Exception thrown when an element is found twice in a collection. public class DuplicateElementException : Exception, ISerializable Inheritance object Exception DuplicateElementException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors DuplicateElementException() Exception thrown when an element is found twice in a collection. public DuplicateElementException() DuplicateElementException(string) Exception thrown when an element is found twice in a collection. public DuplicateElementException(string message) Parameters message string Message to be displayed. DuplicateElementException(string, Exception) Exception thrown when an element is found twice in a collection. public DuplicateElementException(string message, Exception inner) Parameters message string Message to be displayed. inner Exception Inner exception."
  },
  "3-references/ConsoleAppVisuals.Errors.ElementNotFoundException.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.ElementNotFoundException.html",
    "title": "Class ElementNotFoundException | ConsoleAppVisuals",
    "summary": "Class ElementNotFoundException Namespace ConsoleAppVisuals.Errors Assembly ConsoleAppVisuals.dll Exception thrown when an element is not found in a collection. public class ElementNotFoundException : Exception, ISerializable Inheritance object Exception ElementNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors ElementNotFoundException() Exception thrown when an element is not found in a collection. public ElementNotFoundException() ElementNotFoundException(string) Exception thrown when an element is not found in a collection. public ElementNotFoundException(string message) Parameters message string Message to be displayed. ElementNotFoundException(string, Exception) Exception thrown when an element is not found in a collection. public ElementNotFoundException(string message, Exception inner) Parameters message string Message to be displayed. inner Exception Inner exception."
  },
  "3-references/ConsoleAppVisuals.Errors.EmptyFileException.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.EmptyFileException.html",
    "title": "Class EmptyFileException | ConsoleAppVisuals",
    "summary": "Class EmptyFileException Namespace ConsoleAppVisuals.Errors Assembly ConsoleAppVisuals.dll Exception thrown when no data is found in a file. public class EmptyFileException : Exception, ISerializable Inheritance object Exception EmptyFileException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors EmptyFileException() Exception thrown when no data is found in a file. public EmptyFileException() EmptyFileException(string) Exception thrown when no data is found in a file. public EmptyFileException(string message) Parameters message string Message to be displayed. EmptyFileException(string, Exception) Exception thrown when no data is found in a file. public EmptyFileException(string message, Exception inner) Parameters message string Message to be displayed. inner Exception Inner exception."
  },
  "3-references/ConsoleAppVisuals.Errors.LineOutOfConsoleException.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.LineOutOfConsoleException.html",
    "title": "Class LineOutOfConsoleException | ConsoleAppVisuals",
    "summary": "Class LineOutOfConsoleException Namespace ConsoleAppVisuals.Errors Assembly ConsoleAppVisuals.dll Exception thrown when a line exceeds the console's height. public class LineOutOfConsoleException : Exception, ISerializable Inheritance object Exception LineOutOfConsoleException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors LineOutOfConsoleException() Exception thrown when a line exceeds the console's height. public LineOutOfConsoleException() LineOutOfConsoleException(string) Exception thrown when a line exceeds the console's height. public LineOutOfConsoleException(string message) Parameters message string Message to be displayed. LineOutOfConsoleException(string, Exception) Exception thrown when a line exceeds the console's height. public LineOutOfConsoleException(string message, Exception inner) Parameters message string Message to be displayed. inner Exception Inner exception."
  },
  "3-references/ConsoleAppVisuals.Errors.NotSupportedCharException.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.NotSupportedCharException.html",
    "title": "Class NotSupportedCharException | ConsoleAppVisuals",
    "summary": "Class NotSupportedCharException Namespace ConsoleAppVisuals.Errors Assembly ConsoleAppVisuals.dll Exception thrown when a character is not supported by the TextStyler class. public class NotSupportedCharException : Exception, ISerializable Inheritance object Exception NotSupportedCharException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors NotSupportedCharException() Exception thrown when a character is not supported by the TextStyler class. public NotSupportedCharException() NotSupportedCharException(string) Exception thrown when a character is not supported by the TextStyler class. public NotSupportedCharException(string message) Parameters message string Message to be displayed. NotSupportedCharException(string, Exception) Exception thrown when a character is not supported by the TextStyler class. public NotSupportedCharException(string message, Exception inner) Parameters message string Message to be displayed. inner Exception Inner exception."
  },
  "3-references/ConsoleAppVisuals.Errors.html": {
    "href": "3-references/ConsoleAppVisuals.Errors.html",
    "title": "Namespace ConsoleAppVisuals.Errors | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.Errors Classes DuplicateElementException Exception thrown when an element is found twice in a collection. ElementNotFoundException Exception thrown when an element is not found in a collection. EmptyFileException Exception thrown when no data is found in a file. LineOutOfConsoleException Exception thrown when a line exceeds the console's height. NotSupportedCharException Exception thrown when a character is not supported by the TextStyler class."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.Dialog.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.Dialog.html",
    "title": "Class Dialog | ConsoleAppVisuals",
    "summary": "Class Dialog Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The Dialog is an interactive element that displays a dialog bow with one or two choices. See DialogOption enum for the possible outputs of a dialog. public class Dialog : InteractiveElement<DialogOption> Inheritance object Element InteractiveElement<DialogOption> Dialog Inherited Members InteractiveElement<DialogOption>._interactionResponse InteractiveElement<DialogOption>.SetInteractionResponse(object, InteractionEventArgs<DialogOption>) InteractiveElement<DialogOption>.SendResponse(object, InteractionEventArgs<DialogOption>) InteractiveElement<DialogOption>.GetResponse() InteractiveElement<DialogOption>.GetResponseHistory() InteractiveElement<DialogOption>.RenderOptionsBeforeHand() InteractiveElement<DialogOption>.RenderOptionsAfterHand() InteractiveElement<DialogOption>.Type InteractiveElement<DialogOption>.MaxNumberOfThisElement InteractiveElement<DialogOption>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Dialog(List<string>, string?, string?, TextAlignment, Placement, BordersType) The Dialog is an interactive element that displays a dialog bow with one or two choices. See DialogOption enum for the possible outputs of a dialog. public Dialog(List<string> lines, string? leftOption = null, string? rightOption = null, TextAlignment align = TextAlignment.Left, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters lines List<string> The text to display. leftOption string The text of the left option. Null for no button. rightOption string The text of the right option. Null for no button. align TextAlignment The alignment of the Dialog. placement Placement The placement of the Dialog element. bordersType BordersType The type of border to display. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders of the Dialog. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the selector. public BordersType BordersType { get; } Property Value BordersType Height Gets the height of the Dialog. public override int Height { get; } Property Value int LeftOption Gets the text of the left option. public string? LeftOption { get; } Property Value string Lines Gets the rows of the Dialog. public List<string> Lines { get; } Property Value List<string> Placement Gets the position of the Dialog. public override Placement Placement { get; } Property Value Placement RightOption Gets the text of the right option. public string? RightOption { get; } Property Value string TextAlignment Gets the alignment of the Dialog. public override TextAlignment TextAlignment { get; } Property Value TextAlignment TextToDisplay Gets the text to display. public List<string>? TextToDisplay { get; } Property Value List<string> Width Gets the width of the Dialog. public override int Width { get; } Property Value int Methods AddLine(string) Adds a line to the Dialog. public void AddLine(string line) Parameters line string The line to add. Remarks For more information, consider visiting the documentation available here. InsertLine(int, string) Inserts a line to the Dialog. public void InsertLine(int index, string line) Parameters index int The index where to insert the line. line string The line to insert. Remarks For more information, consider visiting the documentation available here. RemoveLine(int) Removes a line from the Dialog. public void RemoveLine(int index) Parameters index int The index of the line to remove. Remarks For more information, consider visiting the documentation available here. RemoveLine(string) Removes a line from the Dialog. public void RemoveLine(string line) Parameters line string The line to remove. Remarks For more information, consider visiting the documentation available here. RenderElementActions() Renders the Dialog. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the borders of the Dialog. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new border type of the Dialog. Remarks For more information, consider visiting the documentation available here. UpdateLeftOption(string?) Updates the text of the second option. public void UpdateLeftOption(string? text) Parameters text string The new text of the second option. Remarks For more information, consider visiting the documentation available here. UpdateLines(List<string>) Updates the text of the Dialog. public void UpdateLines(List<string> lines) Parameters lines List<string> The new text of the Dialog. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the Dialog. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the Dialog. Remarks For more information, consider visiting the documentation available here. UpdateRightOption(string?) Updates the text of the first option. public void UpdateRightOption(string? text) Parameters text string The new text of the first option. Remarks For more information, consider visiting the documentation available here. UpdateTextAlignment(TextAlignment) Updates the alignment of the Dialog. public void UpdateTextAlignment(TextAlignment align) Parameters align TextAlignment The new alignment of the Dialog. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.FloatSelector.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.FloatSelector.html",
    "title": "Class FloatSelector | ConsoleAppVisuals",
    "summary": "Class FloatSelector Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The FloatSelector is an interactive element that allows the user to select a float value from a range of values. public class FloatSelector : InteractiveElement<float> Inheritance object Element InteractiveElement<float> FloatSelector Inherited Members InteractiveElement<float>._interactionResponse InteractiveElement<float>.SetInteractionResponse(object, InteractionEventArgs<float>) InteractiveElement<float>.SendResponse(object, InteractionEventArgs<float>) InteractiveElement<float>.GetResponse() InteractiveElement<float>.GetResponseHistory() InteractiveElement<float>.RenderOptionsBeforeHand() InteractiveElement<float>.RenderOptionsAfterHand() InteractiveElement<float>.Type InteractiveElement<float>.MaxNumberOfThisElement InteractiveElement<float>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors FloatSelector(string, float, float, float, float, Placement, BordersType) The FloatSelector is an interactive element that allows the user to select a float value from a range of values. public FloatSelector(string question, float min, float max, float start, float step, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters question string The question to ask the user. min float The minimum value of the selector. max float The maximum value of the selector. start float The start value of the selector. step float The step of the selector. placement Placement The placement of the selector on the console. bordersType BordersType The type of the borders of the selector. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders manager of the selector. public Borders Borders { get; } Property Value Borders BordersType Gets the type of the borders of the selector. public BordersType BordersType { get; } Property Value BordersType Height Gets the height of the selector. public override int Height { get; } Property Value int LeftSelector Gets the left selector of the selector. public char LeftSelector { get; } Property Value char Max Gets the maximum value of the selector. public float Max { get; } Property Value float Min Gets the minimum value of the selector. public float Min { get; } Property Value float Placement Gets the placement of the selector on the console. public override Placement Placement { get; } Property Value Placement Question Gets the question to ask the user. public string Question { get; } Property Value string RightSelector Gets the right selector of the selector. public char RightSelector { get; } Property Value char Start Gets the start value of the selector. public float Start { get; } Property Value float Step Gets the step of the selector. public float Step { get; } Property Value float Width Gets the width of the selector. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the type of the borders of the selector. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new type of the borders of the selector. Remarks For more information, consider visiting the documentation available here. UpdateLeftSelector(char) Updates the selector of the selector. public void UpdateLeftSelector(char leftSelector = '▶') Parameters leftSelector char The new left selector of the selector. Remarks For more information, consider visiting the documentation available here. UpdateMax(float) Updates the maximum value of the selector. public void UpdateMax(float max) Parameters max float The maximum value of the selector. Remarks For more information, consider visiting the documentation available here. UpdateMin(float) Updates the minimum value of the selector. public void UpdateMin(float min) Parameters min float The minimum value of the selector. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the selector. public void UpdatePlacement(Placement placement) Parameters placement Placement The placement of the selector on the console. Remarks For more information, consider visiting the documentation available here. UpdateQuestion(string) Updates the question of the selector. public void UpdateQuestion(string question) Parameters question string The question to ask the user. Remarks For more information, consider visiting the documentation available here. UpdateRightSelector(char) Updates the selector of the selector. public void UpdateRightSelector(char rightSelector = '◀') Parameters rightSelector char The new right selector of the selector. Remarks For more information, consider visiting the documentation available here. UpdateStart(float) Updates the start value of the selector. public void UpdateStart(float start) Parameters start float The start value of the selector. Remarks For more information, consider visiting the documentation available here. UpdateStep(float) Updates the step of the selector. public void UpdateStep(float step) Parameters step float The step of the selector. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.IntSelector.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.IntSelector.html",
    "title": "Class IntSelector | ConsoleAppVisuals",
    "summary": "Class IntSelector Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The IntSelector is an interactive element that allows the user to select an integer value from a range of values. public class IntSelector : InteractiveElement<int> Inheritance object Element InteractiveElement<int> IntSelector Inherited Members InteractiveElement<int>._interactionResponse InteractiveElement<int>.SetInteractionResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.SendResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.GetResponse() InteractiveElement<int>.GetResponseHistory() InteractiveElement<int>.RenderOptionsBeforeHand() InteractiveElement<int>.RenderOptionsAfterHand() InteractiveElement<int>.Type InteractiveElement<int>.MaxNumberOfThisElement InteractiveElement<int>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors IntSelector(string, int, int, int, int, Placement, BordersType) The IntSelector is an interactive element that allows the user to select an integer value from a range of values. public IntSelector(string question, int min, int max, int start, int step, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters question string The question to ask the user. min int The minimum value of the selector. max int The maximum value of the selector. start int The start value of the selector. step int The step of the selector. placement Placement The placement of the selector on the console. bordersType BordersType The border type of the selector. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders manager of the selector. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the selector. public BordersType BordersType { get; } Property Value BordersType Height Gets the height of the selector. public override int Height { get; } Property Value int LeftSelector Gets the left selector of the selector. public char LeftSelector { get; } Property Value char Max Gets the maximum value of the selector. public int Max { get; } Property Value int Min Gets the minimum value of the selector. public int Min { get; } Property Value int Placement Gets the placement of the selector on the console. public override Placement Placement { get; } Property Value Placement Question Gets the question to ask the user. public string Question { get; } Property Value string RightSelector Gets the right selector of the selector. public char RightSelector { get; } Property Value char Start Gets the start value of the selector. public int Start { get; } Property Value int Step Gets the step of the selector. public int Step { get; } Property Value int Width Gets the width of the selector. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the border type of the selector. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The border type of the selector. Remarks For more information, consider visiting the documentation available here. UpdateLeftSelector(char) Updates the selector of the selector. public void UpdateLeftSelector(char leftSelector = '▶') Parameters leftSelector char The new left selector of the selector. Remarks For more information, consider visiting the documentation available here. UpdateMax(int) Updates the maximum value of the selector. public void UpdateMax(int max) Parameters max int The maximum value of the selector. Remarks For more information, consider visiting the documentation available here. UpdateMin(int) Updates the minimum value of the selector. public void UpdateMin(int min) Parameters min int The minimum value of the selector. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the selector. public void UpdatePlacement(Placement placement) Parameters placement Placement The placement of the selector on the console. Remarks For more information, consider visiting the documentation available here. UpdateQuestion(string) Updates the question of the selector. public void UpdateQuestion(string question) Parameters question string The question to ask the user. Remarks For more information, consider visiting the documentation available here. UpdateRightSelector(char) Updates the selector of the selector. public void UpdateRightSelector(char rightSelector = '◀') Parameters rightSelector char The new right selector of the selector. Remarks For more information, consider visiting the documentation available here. UpdateStart(int) Updates the start value of the selector. public void UpdateStart(int start) Parameters start int The start value of the selector. Remarks For more information, consider visiting the documentation available here. UpdateStep(int) Updates the step of the selector. public void UpdateStep(int step) Parameters step int The step of the selector. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.Prompt.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.Prompt.html",
    "title": "Class Prompt | ConsoleAppVisuals",
    "summary": "Class Prompt Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The Prompt is an interactive element that allows the user to input a string response. public class Prompt : InteractiveElement<string> Inheritance object Element InteractiveElement<string> Prompt Inherited Members InteractiveElement<string>._interactionResponse InteractiveElement<string>.SetInteractionResponse(object, InteractionEventArgs<string>) InteractiveElement<string>.SendResponse(object, InteractionEventArgs<string>) InteractiveElement<string>.GetResponse() InteractiveElement<string>.GetResponseHistory() InteractiveElement<string>.RenderOptionsBeforeHand() InteractiveElement<string>.RenderOptionsAfterHand() InteractiveElement<string>.Type InteractiveElement<string>.MaxNumberOfThisElement InteractiveElement<string>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Prompt(string, string?, Placement, int, PromptInputStyle, BordersType) The Prompt is an interactive element that allows the user to input a string response. public Prompt(string question, string? defaultValue = null, Placement placement = Placement.TopCenter, int maxInputLength = 12, PromptInputStyle style = PromptInputStyle.Default, BordersType borderType = BordersType.SingleStraight) Parameters question string The text on the left of the prompt element. defaultValue string The text in the center of the prompt element. placement Placement The placement of the prompt element. maxInputLength int The maximum length of the response. style PromptInputStyle The style of the prompt input. borderType BordersType The type of border to use for the element. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders of the prompt element. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the selector. public BordersType BordersType { get; } Property Value BordersType DefaultValue Gets the default value of the response. public string DefaultValue { get; } Property Value string Height Gets the height of the prompt element. public override int Height { get; } Property Value int MaxInputLength Gets the maximum length of the response. public int MaxInputLength { get; } Property Value int Placement Gets the placement of the prompt element. public override Placement Placement { get; } Property Value Placement Question Gets the question of the prompt element. public string Question { get; } Property Value string Selector Gets the selector of the prompt element. public char Selector { get; } Property Value char Style Gets the style of the prompt input. public PromptInputStyle Style { get; } Property Value PromptInputStyle Width Gets the width of the prompt element. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the border type of the prompt element. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new border type of the prompt element. Remarks For more information, consider visiting the documentation available here. UpdateDefaultValue(string?) Updates the default value of the prompt element. public void UpdateDefaultValue(string? defaultValue) Parameters defaultValue string The new default value of the prompt element. Remarks For more information, consider visiting the documentation available here. UpdateMaxLength(int) Updates the maximum length of the response. public void UpdateMaxLength(int maxLength) Parameters maxLength int The new maximum length of the response. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException The maximum length of the response must be greater than 0 and less than the width of the console window. UpdatePlacement(Placement) Updates the placement of the prompt element. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the prompt element. Remarks For more information, consider visiting the documentation available here. UpdateQuestion(string) Updates the question of the prompt element. public void UpdateQuestion(string question) Parameters question string The new question of the prompt element. Remarks For more information, consider visiting the documentation available here. UpdateSelector(char) Updates the selector of the prompt element. public void UpdateSelector(char selector = '▶') Parameters selector char The new selector of the prompt element. Remarks For more information, consider visiting the documentation available here. UpdateStyle(PromptInputStyle) Updates the style of the prompt input. public void UpdateStyle(PromptInputStyle style) Parameters style PromptInputStyle The new style of the prompt input. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.ScrollingMenu.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.ScrollingMenu.html",
    "title": "Class ScrollingMenu | ConsoleAppVisuals",
    "summary": "Class ScrollingMenu Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The ScrollingMenu is an interactive element that displays a question with multiple scrollable choices. public class ScrollingMenu : InteractiveElement<int> Inheritance object Element InteractiveElement<int> ScrollingMenu Inherited Members InteractiveElement<int>._interactionResponse InteractiveElement<int>.SetInteractionResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.SendResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.GetResponse() InteractiveElement<int>.GetResponseHistory() InteractiveElement<int>.RenderOptionsBeforeHand() InteractiveElement<int>.RenderOptionsAfterHand() InteractiveElement<int>.Type InteractiveElement<int>.MaxNumberOfThisElement InteractiveElement<int>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors ScrollingMenu(string, int, Placement, params string[]) The ScrollingMenu is an interactive element that displays a question with multiple scrollable choices. public ScrollingMenu(string question, int defaultIndex = 0, Placement placement = Placement.TopCenter, params string[] choices) Parameters question string The question to ask the user. defaultIndex int The index of the default choice(initially 0). placement Placement The placement of the menu on the console. choices string[] The different choices of the menu. Remarks For more information, consider visiting the documentation available here. Properties Choices Gets the different choices of the menu. public string[] Choices { get; } Property Value string[] DefaultIndex Gets the index of the default choice. public int DefaultIndex { get; } Property Value int Height Gets the height of the menu. public override int Height { get; } Property Value int Placement Gets the placement of the menu on the console. public override Placement Placement { get; } Property Value Placement Question Gets the question to ask the user. public string Question { get; } Property Value string Selector Gets the selector char of the menu. public char Selector { get; } Property Value char Width Gets the width of the menu. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateChoices(params string[]) Updates the choices of the menu. public void UpdateChoices(params string[] choices) Parameters choices string[] The new choices of the menu. Remarks For more information, consider visiting the documentation available here. UpdateDefaultIndex(int) Updates the default index of the menu. public void UpdateDefaultIndex(int defaultIndex) Parameters defaultIndex int The new default index of the menu. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the menu. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the menu. Remarks For more information, consider visiting the documentation available here. UpdateQuestion(string) Updates the question of the menu. public void UpdateQuestion(string question) Parameters question string The new question of the menu. Remarks For more information, consider visiting the documentation available here. UpdateSelector(char) Updates the selector of the menu. public void UpdateSelector(char selector = '▶') Parameters selector char The new selector of the menu. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.TableSelector.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.TableSelector.html",
    "title": "Class TableSelector | ConsoleAppVisuals",
    "summary": "Class TableSelector Namespace ConsoleAppVisuals.InteractiveElements Assembly ConsoleAppVisuals.dll The TableSelector is an interactive element that displays a table with selectable elements. public class TableSelector : InteractiveElement<int> Inheritance object Element InteractiveElement<int> TableSelector Inherited Members InteractiveElement<int>._interactionResponse InteractiveElement<int>.SetInteractionResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.SendResponse(object, InteractionEventArgs<int>) InteractiveElement<int>.GetResponse() InteractiveElement<int>.GetResponseHistory() InteractiveElement<int>.RenderOptionsBeforeHand() InteractiveElement<int>.RenderOptionsAfterHand() InteractiveElement<int>.Type InteractiveElement<int>.MaxNumberOfThisElement InteractiveElement<int>.EndOfInteractionEvent Element.ToggleVisibility() Element.RenderElement() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors TableSelector(string?, List<string>?, List<List<string>>?, bool, bool, string?, Placement, BordersType) The TableSelector is an interactive element that displays a table with selectable elements. public TableSelector(string? title = null, List<string>? headers = null, List<List<string>>? lines = null, bool excludeHeader = true, bool excludeFooter = true, string? footerText = null, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters title string The title of the table. headers List<string> The headers of the table. lines List<List<string>> The lines of the table. excludeHeader bool Whether to exclude the header from selectable elements. excludeFooter bool Whether to exclude the footer from selectable elements. footerText string The text to display in the footer. placement Placement The placement of the table. bordersType BordersType The type of the borders of the table. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the number of columns in the table is not consistent with itself or with the headers. NullReferenceException Thrown when no body lines were provided. Properties Borders Gets the borders manager of the table. public Borders Borders { get; } Property Value Borders BordersType Gets the type of the borders of the table. public BordersType BordersType { get; } Property Value BordersType Count Gets the number of lines in the table. public int Count { get; } Property Value int DisplayArray Gets the display array of the table. public string[]? DisplayArray { get; } Property Value string[] ExcludeFooter Gets if the footer is excluded. public bool ExcludeFooter { get; } Property Value bool ExcludeHeader Gets if the header is excluded. public bool ExcludeHeader { get; } Property Value bool FooterText Gets the text of the footer. public string FooterText { get; } Property Value string GetRawHeaders Gets the headers of the table. public List<string>? GetRawHeaders { get; } Property Value List<string> GetRawLines Gets the lines of the table. public List<List<string>>? GetRawLines { get; } Property Value List<List<string>> Height Gets the height of the table. public override int Height { get; } Property Value int Placement Gets the placement of the table on the console. public override Placement Placement { get; } Property Value Placement Title Gets the title of the table. public string? Title { get; } Property Value string Width Gets the width of the table. public override int Width { get; } Property Value int Methods AddHeaders(List<string>) Adds headers to the table. public void AddHeaders(List<string> headers) Parameters headers List<string> The headers to add. Remarks For more information, consider visiting the documentation available here. AddLine(List<string>) Adds a line to the table. public void AddLine(List<string> line) Parameters line List<string> The line to add. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the number of columns in the table is not consistent with itself or with the headers. AddTitle(string) Adds a title to the table. public void AddTitle(string title) Parameters title string The title to add. Remarks For more information, consider visiting the documentation available here. ClearHeaders() Clears the headers of the table. public void ClearHeaders() Remarks For more information, consider visiting the documentation available here. ClearLines() Clears the lines of the table. public void ClearLines() Remarks For more information, consider visiting the documentation available here. GetColumnData(int) Gets all the elements from a column given its index. public List<string>? GetColumnData(int index) Parameters index int The index of the column. Returns List<string> The elements of the column. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. GetColumnData(string) Gets all the elements from a column given its header. public List<string>? GetColumnData(string header) Parameters header string The header of the column. Returns List<string> The elements of the column. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the header is invalid. GetLine(int) Gets the specified line in the table. public List<string> GetLine(int index) Parameters index int The index of the line to return. Returns List<string> The line at the specified index. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. RemoveLine(int) Removes a line from the table given its index. public void RemoveLine(int index) Parameters index int The index of the line to remove. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() Reset() Clears the table. public void Reset() Remarks For more information, consider visiting the documentation available here. SetExcludeFooter(bool) Sets the table to exclude the footer. public void SetExcludeFooter(bool excludeFooter = true) Parameters excludeFooter bool Whether to exclude the footer or not. Remarks For more information, consider visiting the documentation available here. SetExcludeHeader(bool) Sets the table to exclude the header. public void SetExcludeHeader(bool excludeHeader = true) Parameters excludeHeader bool Whether to exclude the header or not. Remarks For more information, consider visiting the documentation available here. UpdateBordersType(BordersType) Updates the type of the borders of the table. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The type of the borders of the table. Remarks For more information, consider visiting the documentation available here. UpdateFooterText(string) Updates the text of the footer. public void UpdateFooterText(string footerText) Parameters footerText string The text of the footer. Remarks For more information, consider visiting the documentation available here. UpdateHeaders(List<string>) Updates the headers of the table. public void UpdateHeaders(List<string> headers) Parameters headers List<string> The headers to update. Remarks For more information, consider visiting the documentation available here. UpdateLine(int, List<string>) Updates a line in the table. public void UpdateLine(int index, List<string> line) Parameters index int The index of the line to update. line List<string> The new line. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. ArgumentException Thrown when the number of columns in the table is not consistent with itself or with the headers. UpdatePlacement(Placement) Updates the placement of the table. public void UpdatePlacement(Placement placement) Parameters placement Placement The placement of the table. Remarks For more information, consider visiting the documentation available here. UpdateTitle(string) Updates the title of the table. public void UpdateTitle(string title) Parameters title string The title to update. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.InteractiveElements.html": {
    "href": "3-references/ConsoleAppVisuals.InteractiveElements.html",
    "title": "Namespace ConsoleAppVisuals.InteractiveElements | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.InteractiveElements Classes Dialog The Dialog is an interactive element that displays a dialog bow with one or two choices. See DialogOption enum for the possible outputs of a dialog. FloatSelector The FloatSelector is an interactive element that allows the user to select a float value from a range of values. IntSelector The IntSelector is an interactive element that allows the user to select an integer value from a range of values. Prompt The Prompt is an interactive element that allows the user to input a string response. ScrollingMenu The ScrollingMenu is an interactive element that displays a question with multiple scrollable choices. TableSelector The TableSelector is an interactive element that displays a table with selectable elements."
  },
  "3-references/ConsoleAppVisuals.Models.AnimatedElement.html": {
    "href": "3-references/ConsoleAppVisuals.Models.AnimatedElement.html",
    "title": "Class AnimatedElement | ConsoleAppVisuals",
    "summary": "Class AnimatedElement Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The AnimatedElement class is an abstract class that represents an element that can be rendered on the console and animated. public abstract class AnimatedElement : Element Inheritance object Element AnimatedElement Derived FakeLoadingBar LoadingBar Inherited Members Element.ToggleVisibility() Element.RenderElement() Element.RenderElementActions() Element.RenderOptionsBeforeHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.Height Element.Width Element.Placement Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors AnimatedElement() protected AnimatedElement() Properties MaxNumberOfThisElement Gets the maximum number of this element that can be displayed on the console simultaneously. public override sealed int MaxNumberOfThisElement { get; } Property Value int Type Gets the type of the element. public override sealed ElementType Type { get; } Property Value ElementType Methods RenderOptionsAfterHand() Deactivates the element after having been rendered. [Visual] protected override sealed void RenderOptionsAfterHand()"
  },
  "3-references/ConsoleAppVisuals.Models.Borders.html": {
    "href": "3-references/ConsoleAppVisuals.Models.Borders.html",
    "title": "Class Borders | ConsoleAppVisuals",
    "summary": "Class Borders Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The Borders class defines the border characters to use for embed elements. public class Borders Inheritance object Borders Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Borders(BordersType) The Borders class defines the border characters to use for embed elements. public Borders(BordersType type = BordersType.SingleStraight) Parameters type BordersType The type of border to use for the element. Remarks For more information, consider visiting the documentation available here. Properties Bottom Gets the bottom line of the border. (┴) public char Bottom { get; } Property Value char BottomLeft Gets the bottom-left corner of the border. (└) public char BottomLeft { get; } Property Value char BottomRight Gets the bottom-right corner of the border. (┘) public char BottomRight { get; } Property Value char Cross Gets the cross of the border. (┼) public char Cross { get; } Property Value char Horizontal Gets the horizontal line of the border. (─) public char Horizontal { get; } Property Value char Left Gets the left line of the border. (├) public char Left { get; } Property Value char Right Gets the right line of the border. (┤) public char Right { get; } Property Value char Top Gets the top line of the border. (┬) public char Top { get; } Property Value char TopLeft Gets the top-left corner of the border. (┌) public char TopLeft { get; } Property Value char TopRight Gets the top-right corner of the border. (┐) public char TopRight { get; } Property Value char Type Gets the type of border to use for the element. public BordersType Type { get; } Property Value BordersType Vertical Gets the vertical line of the border. (│) public char Vertical { get; } Property Value char Methods GetBorderChar(int) Gets the border character at the specified index. public char GetBorderChar(int index) Parameters index int The index of the border character to get. Returns char The border character at the specified index. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the border type is invalid. ArgumentOutOfRangeException Thrown when the index is out of range. UpdateBordersType(BordersType) Updates the border type of the element. public void UpdateBordersType(BordersType newType) Parameters newType BordersType The new border type to use. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.Models.Element.html": {
    "href": "3-references/ConsoleAppVisuals.Models.Element.html",
    "title": "Class Element | ConsoleAppVisuals",
    "summary": "Class Element Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The Element class is an abstract class that represents an element that can be rendered on the console. public abstract class Element Inheritance object Element Derived AnimatedElement InteractiveElement<TResponse> PassiveElement Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Element() protected Element() Properties Height Gets the height of the element, the vertical number of lines taken in the console. public virtual int Height { get; } Property Value int Remarks This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific. Id Gets the id number of the element. public int Id { get; set; } Property Value int Remarks This property is sealed. The ID of an element is automatically generated and managed by the Window class. Line Gets a line to place the element in the console. public virtual int Line { get; } Property Value int Remarks ATTENTION: This property is not marked as virtual. Override this property only to give it a constant value. Exceptions ArgumentOutOfRangeException Thrown when the placement of the element is invalid. MaxNumberOfThisElement Gets the maximum number of this element that can be drawn on the console. public virtual int MaxNumberOfThisElement { get; } Property Value int Remarks This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific. Placement Gets the placement of the element int the console. See the Placement enum to know the possible values. public virtual Placement Placement { get; set; } Property Value Placement Remarks This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific. TextAlignment Gets the text alignment of the text of the element. See the TextAlignment enum to know the possible values. public virtual TextAlignment TextAlignment { get; set; } Property Value TextAlignment Remarks This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific. Type Gets the type of the element. [Visual] public virtual ElementType Type { get; } Property Value ElementType Visibility Gets the visibility of the element. public bool Visibility { get; } Property Value bool Remarks This property is sealed. The visibility of an element is managed by the ToggleVisibility() method. Width Gets the width of the element, the horizontal number of lines taken in the console. public virtual int Width { get; } Property Value int Remarks This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific. Methods Clear() Clears the space taken by the element on the console. [Visual] public void Clear() Remarks For more information, consider visiting the documentation available here. GetRenderSpace() Gets the space taken by the element on the console. [Visual] protected virtual string[] GetRenderSpace() Returns string[] The space taken by the element. Remarks This method is marked as virtual. It is recommended to override this method in derived classes to make it more specific. RenderElement() Renders the element on the console. [Visual] public void RenderElement() Remarks For more information, consider visiting the documentation available here. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected virtual void RenderElementActions() Remarks This method is marked as virtual. It is recommended to override this method in derived classes to make it more specific. RenderElementSpace(bool) Renders the space taken by the element on the console. [Visual] public void RenderElementSpace(bool ignoreVisibility = false) Parameters ignoreVisibility bool Whether to ignore the visibility of the element or not. Remarks For more information, consider visiting the documentation available here. RenderOptionsAfterHand() Defines actions to perform after rendering the element on the console. [Visual] protected virtual void RenderOptionsAfterHand() RenderOptionsBeforeHand() Defines actions to perform before rendering the element on the console. [Visual] protected virtual void RenderOptionsBeforeHand() ToggleVisibility() Toggles the visibility of the element. If the maximum number of this element is reached, an exception is thrown. public void ToggleVisibility() Remarks This method is effectively sealed. The only way to change the visibility of an element is to use this method. Exceptions InvalidOperationException Thrown when the maximum number of this element is reached."
  },
  "3-references/ConsoleAppVisuals.Models.FontYamlFile.html": {
    "href": "3-references/ConsoleAppVisuals.Models.FontYamlFile.html",
    "title": "Class FontYamlFile | ConsoleAppVisuals",
    "summary": "Class FontYamlFile Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The FontYamlFile class defines the structure of a yaml file used to store the height of each character of a font. public class FontYamlFile Inheritance object FontYamlFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors FontYamlFile() public FontYamlFile() Properties Author The author of the font. [YamlMember(Alias = \"author\", ApplyNamingConventions = false)] public string? Author { get; set; } Property Value string Chars The height of the elements of the font. public Dictionary<string, string>? Chars { get; set; } Property Value Dictionary<string, string> Height The height of each font element. [YamlMember(Alias = \"height\", ApplyNamingConventions = false)] public int? Height { get; set; } Property Value int? Name The name of the font. [YamlMember(Alias = \"name\", ApplyNamingConventions = false)] public string? Name { get; set; } Property Value string"
  },
  "3-references/ConsoleAppVisuals.Models.InteractionEventArgs-1.html": {
    "href": "3-references/ConsoleAppVisuals.Models.InteractionEventArgs-1.html",
    "title": "Class InteractionEventArgs<T> | ConsoleAppVisuals",
    "summary": "Class InteractionEventArgs<T> Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The InteractionEventArgs class is a generic class that represents the event arguments for the interactive elements. public class InteractionEventArgs<T> : EventArgs Type Parameters T Inheritance object EventArgs InteractionEventArgs<T> Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors InteractionEventArgs(Status, T) The InteractionEventArgs class is a generic class that represents the event arguments for the interactive elements. public InteractionEventArgs(Status status, T value) Parameters status Status The status of the exit from the menu. value T The value of the response after exiting the interactive element. Remarks For more information, consider visiting the documentation available here. Properties Status Gets the status after exiting the interactive element. See the Status enumeration to know the possible values. public Status Status { get; set; } Property Value Status Status.Escaped : pressed escape, Status.Deleted : pressed backspace, Status.Selected : pressed enter Value Gets the T value of the response after exiting the interactive element. public T Value { get; set; } Property Value T"
  },
  "3-references/ConsoleAppVisuals.Models.InteractiveElement-1.html": {
    "href": "3-references/ConsoleAppVisuals.Models.InteractiveElement-1.html",
    "title": "Class InteractiveElement<TResponse> | ConsoleAppVisuals",
    "summary": "Class InteractiveElement<TResponse> Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The InteractiveElement class is an abstract class that represents the interactive elements. public abstract class InteractiveElement<TResponse> : Element Type Parameters TResponse Inheritance object Element InteractiveElement<TResponse> Derived Dialog FloatSelector IntSelector Prompt ScrollingMenu TableSelector Inherited Members Element.ToggleVisibility() Element.RenderElement() Element.RenderElementActions() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.Height Element.Width Element.Placement Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors InteractiveElement() protected InteractiveElement() Fields _interactionResponse The response of the user. protected List<InteractionEventArgs<TResponse>?> _interactionResponse Field Value List<InteractionEventArgs<TResponse>> Properties MaxNumberOfThisElement Gets the maximum number of this element that can be drawn on the console. As an interactive element, the value is 1. public override sealed int MaxNumberOfThisElement { get; } Property Value int Type Gets the type of the element. public override sealed ElementType Type { get; } Property Value ElementType Methods GetResponse() Gets the response of the user after an interaction. [Visual] public InteractionEventArgs<TResponse>? GetResponse() Returns InteractionEventArgs<TResponse> Null if the user has not interacted with the element, otherwise the response of the user. Remarks This sample shows how to use the GetResponse() method using the var keyword: var response = element.GetResponse(); For more information, consider visiting the documentation available here. GetResponseHistory() Gets the history of the responses of the user after interactions. [Visual] public List<InteractionEventArgs<TResponse>?> GetResponseHistory() Returns List<InteractionEventArgs<TResponse>> The history of the responses of the user after interactions. Remarks For more information, consider visiting the documentation available here. RenderOptionsAfterHand() Stops listening to the user's interactions with the element. [Visual] protected override sealed void RenderOptionsAfterHand() Remarks For more information, consider visiting the documentation available here. RenderOptionsBeforeHand() Listens to the user's interactions with the element. [Visual] protected override sealed void RenderOptionsBeforeHand() Remarks For more information, consider visiting the documentation available here. SendResponse(object?, InteractionEventArgs<TResponse>) Triggers the EndOfInteractionEvent event. [Visual] protected void SendResponse(object? sender, InteractionEventArgs<TResponse> e) Parameters sender object The sender of the event. e InteractionEventArgs<TResponse> The response of the user. SetInteractionResponse(object?, InteractionEventArgs<TResponse>) Sets the response of the user in the attribute field. [Visual] protected void SetInteractionResponse(object? sender, InteractionEventArgs<TResponse> e) Parameters sender object The sender of the event. e InteractionEventArgs<TResponse> The response of the user. Events EndOfInteractionEvent The event that is triggered when the user has interacted with the element. public event EventHandler<InteractionEventArgs<TResponse>>? EndOfInteractionEvent Event Type EventHandler<InteractionEventArgs<TResponse>>"
  },
  "3-references/ConsoleAppVisuals.Models.PassiveElement.html": {
    "href": "3-references/ConsoleAppVisuals.Models.PassiveElement.html",
    "title": "Class PassiveElement | ConsoleAppVisuals",
    "summary": "Class PassiveElement Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The PassiveElement class is an abstract class that represents the passive elements. public abstract class PassiveElement : Element Inheritance object Element PassiveElement Derived ASCIIArt Banner ElementsDashboard ElementsList EmbedText Footer Header HeightSpacer Matrix<T> TableView Text Title Inherited Members Element.ToggleVisibility() Element.RenderElement() Element.RenderElementActions() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.Height Element.Width Element.Placement Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors PassiveElement() protected PassiveElement() Properties Type Gets the type of the element. public override sealed ElementType Type { get; } Property Value ElementType"
  },
  "3-references/ConsoleAppVisuals.Models.Position.html": {
    "href": "3-references/ConsoleAppVisuals.Models.Position.html",
    "title": "Struct Position | ConsoleAppVisuals",
    "summary": "Struct Position Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The Position struct represents a position in the console with a line and a column. public struct Position : IEquatable<Position> Implements IEquatable<Position> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks For more information, consider visiting the documentation available here. Constructors Position(Position) Initializes a new instance of the Position class with another instance of the Position class. public Position(Position pos) Parameters pos Position The position to copy. Remarks For more information, consider visiting the documentation available here. Position(int, int) Initializes a new instance of the Position class with 2 coordinates. public Position(int x, int y) Parameters x int The x coordinate of the position. y int The y coordinate of the position. Remarks For more information, consider visiting the documentation available here. Properties X Gets the x coordinate of the position. public int X { readonly get; set; } Property Value int Y Gets the y coordinate of the position. public int Y { readonly get; set; } Property Value int Methods Equals(object?) Compares the position to another position. public override readonly bool Equals(object? obj) Parameters obj object The position to compare to. Returns bool True if the positions are equal, false otherwise. Remarks For more information, consider visiting the documentation available here. GetHashCode() Gets the hash code of the position. public override readonly int GetHashCode() Returns int An integer representing the hash code of the position. Remarks For more information, consider visiting the documentation available here. ToString() Converts the position to a string. public override readonly string ToString() Returns string The position as a string. Remarks For more information, consider visiting the documentation available here. Operators operator ==(Position, Position) Implements the operator to check if the position is equal to another position. public static bool operator ==(Position left, Position right) Parameters left Position The first position to compare. right Position The second position to compare. Returns bool True if the positions are equal, false otherwise. operator !=(Position, Position) Implements the operator to check if the position is not equal to another position. public static bool operator !=(Position left, Position right) Parameters left Position The first position to compare. right Position The second position to compare. Returns bool True if the positions are not equal, false otherwise."
  },
  "3-references/ConsoleAppVisuals.Models.TextStyler.html": {
    "href": "3-references/ConsoleAppVisuals.Models.TextStyler.html",
    "title": "Class TextStyler | ConsoleAppVisuals",
    "summary": "Class TextStyler Namespace ConsoleAppVisuals.Models Assembly ConsoleAppVisuals.dll The TextStyler class is a class that styles text with the font files. public class TextStyler Inheritance object TextStyler Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors TextStyler(Font, string?, Assembly?) The TextStyler class is a class that styles text with the font files. public TextStyler(Font source = Font.ANSI_Shadow, string? fontPath = null, Assembly? assembly = null) Parameters source Font The font to use. Font.Custom if you want to use your own font. fontPath string ATTENTION: only use the path to the font files for custom fonts. assembly Assembly ATTENTION: Debug purposes only. Do not update it. Remarks For more information, consider visiting the documentation available here. Exceptions EmptyFileException Thrown when the config.yml file is empty. Properties Dictionary Gets the dictionary that stores the characters and their styled equivalent. public Dictionary<char, string> Dictionary { get; } Property Value Dictionary<char, string> Font Gets the font to use. Font.Custom if you want to use your own font. public Font Font { get; } Property Value Font FontPath Gets the path to the font files. Null if the font is not custom. public string? FontPath { get; } Property Value string SupportedAlphabet Gets the supported alphabet by the font. public string SupportedAlphabet { get; } Property Value string SupportedChars Gets all the supported characters by the font. public string SupportedChars { get; } Property Value string SupportedNumbers Gets the supported numbers by the font. public string SupportedNumbers { get; } Property Value string SupportedSymbols Gets the supported symbols by the font. public string SupportedSymbols { get; } Property Value string Methods Style(string) Styles the given text with the font files. public string[] Style(string text) Parameters text string The text to style. Returns string[] The styled text as a string array. Remarks For more information, consider visiting the documentation available here. ToString() Gets the info of the actual style (from the config.yml file). public override string ToString() Returns string A string compiling these pieces of information. Remarks For more information, consider visiting the documentation available here. Exceptions EmptyFileException Thrown when the config.yml file is empty."
  },
  "3-references/ConsoleAppVisuals.Models.html": {
    "href": "3-references/ConsoleAppVisuals.Models.html",
    "title": "Namespace ConsoleAppVisuals.Models | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.Models Classes AnimatedElement The AnimatedElement class is an abstract class that represents an element that can be rendered on the console and animated. Borders The Borders class defines the border characters to use for embed elements. Element The Element class is an abstract class that represents an element that can be rendered on the console. FontYamlFile The FontYamlFile class defines the structure of a yaml file used to store the height of each character of a font. InteractionEventArgs<T> The InteractionEventArgs class is a generic class that represents the event arguments for the interactive elements. InteractiveElement<TResponse> The InteractiveElement class is an abstract class that represents the interactive elements. PassiveElement The PassiveElement class is an abstract class that represents the passive elements. TextStyler The TextStyler class is a class that styles text with the font files. Structs Position The Position struct represents a position in the console with a line and a column."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.ASCIIArt.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.ASCIIArt.html",
    "title": "Class ASCIIArt | ConsoleAppVisuals",
    "summary": "Class ASCIIArt Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The ASCIIArt is a passive element that displays ASCII art from a file or string content. public class ASCIIArt : PassiveElement Inheritance object Element PassiveElement ASCIIArt Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors ASCIIArt(List<string>, Placement) The ASCIIArt is a passive element that displays ASCII art from a list of strings. public ASCIIArt(List<string> artLines, Placement placement = Placement.TopCenter) Parameters artLines List<string> The lines of ASCII art to display. placement Placement The placement of the ASCIIArt element on the screen. Remarks For more information, consider visiting the documentation available here. ASCIIArt(string, Placement) The ASCIIArt is a passive element that displays ASCII art from a file. public ASCIIArt(string filePath, Placement placement = Placement.TopCenter) Parameters filePath string The path to the file containing the ASCII art. placement Placement The placement of the ASCIIArt element on the screen. Remarks For more information, consider visiting the documentation available here. Properties ArtLines Gets the art lines of the ASCIIArt element. public List<string> ArtLines { get; } Property Value List<string> Height Gets the height of the ASCIIArt element. public override int Height { get; } Property Value int Placement Gets the position of the ASCIIArt element on the screen. public override Placement Placement { get; } Property Value Placement TextAlignment Gets the alignment of the ASCIIArt element. public override TextAlignment TextAlignment { get; } Property Value TextAlignment Width Gets the width of the ASCIIArt element. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateArt(string) Updates the ASCII art from a multiline string. public void UpdateArt(string art) Parameters art string The new ASCII art as a multiline string. Remarks For more information, consider visiting the documentation available here. UpdateArtLines(List<string>) Updates the ASCII art lines. public void UpdateArtLines(List<string> artLines) Parameters artLines List<string> The new ASCII art lines. Remarks For more information, consider visiting the documentation available here. UpdateFromFile(string) Updates the ASCII art from a file. public void UpdateFromFile(string filePath) Parameters filePath string The path to the file containing the new ASCII art. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the ASCIIArt element on the screen. public void UpdatePlacement(Placement newPlacement) Parameters newPlacement Placement The new placement of the ASCIIArt element. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Banner.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Banner.html",
    "title": "Class Banner | ConsoleAppVisuals",
    "summary": "Class Banner Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Banner is a passive element that displays a banner on the console. public class Banner : PassiveElement Inheritance object Element PassiveElement Banner Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Banner(string, string, string, int, int, Placement) The Banner is a passive element that displays a banner on the console. public Banner(string leftText = \"Banner Left\", string centerText = \"Banner Center\", string rightText = \"Banner Right\", int upperMargin = 0, int lowerMargin = 0, Placement placement = Placement.TopCenterFullWidth) Parameters leftText string The text on the left of the banner. centerText string The text in the center of the banner. rightText string The text on the right of the banner. upperMargin int The upper margin of the banner. lowerMargin int The lower margin of the banner. placement Placement The placement of the banner. Remarks For more information, consider visiting the documentation available here. Properties Height Gets the height of the banner. public override int Height { get; } Property Value int LowerMargin Gets the lower margin of the banner. public int LowerMargin { get; } Property Value int Placement Gets the placement of the banner. public override Placement Placement { get; } Property Value Placement Text Gets the text of the banner. public (string, string, string) Text { get; } Property Value (string, string, string) UpperMargin Gets the upper margin of the banner. public int UpperMargin { get; } Property Value int Width Gets the width of the banner. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateCenterText(string) Updates the text in the center of the banner. public void UpdateCenterText(string centerText) Parameters centerText string The new text in the center of the banner. Remarks For more information, consider visiting the documentation available here. UpdateLeftText(string) Updates the text on the left of the banner. public void UpdateLeftText(string leftText) Parameters leftText string The new text on the left of the banner. Remarks For more information, consider visiting the documentation available here. UpdateLowerMargin(int) Updates the lower margin of the banner. public void UpdateLowerMargin(int lowerMargin) Parameters lowerMargin int The new lower margin of the banner. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException The lower margin of the banner must be between 0 and the height of the console window. UpdatePlacement(Placement) Updates the placement of the banner. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the banner. Remarks For more information, consider visiting the documentation available here. UpdateRightText(string) Updates the text on the right of the banner. public void UpdateRightText(string rightText) Parameters rightText string The new text on the right of the banner. Remarks For more information, consider visiting the documentation available here. UpdateUpperMargin(int) Updates the upper margin of the banner. public void UpdateUpperMargin(int upperMargin) Parameters upperMargin int The new upper margin of the banner. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException The upper margin of the banner must be between 0 and the height of the console window."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.ElementsDashboard.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.ElementsDashboard.html",
    "title": "Class ElementsDashboard | ConsoleAppVisuals",
    "summary": "Class ElementsDashboard Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The ElementsDashboard is a passive element that displays a dashboard of all the elements currently in the Window class. public class ElementsDashboard : PassiveElement Inheritance object Element PassiveElement ElementsDashboard Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors ElementsDashboard(Placement, BordersType) The ElementsDashboard is a passive element that displays a dashboard of all the elements currently in the Window class. public ElementsDashboard(Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters placement Placement The placement of the dashboard. bordersType BordersType The type of borders to be used in the dashboard. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the border manager of the dashboard. public Borders Borders { get; } Property Value Borders BordersType Gets the type of borders to be used in the dashboard. public BordersType BordersType { get; } Property Value BordersType Count Gets the number of lines in the dashboard. public int Count { get; } Property Value int Headers Gets the headers of the dashboard. public static List<string> Headers { get; } Property Value List<string> Height This property returns the height of the dashboard. public override int Height { get; } Property Value int Lines Gets the lines of the dashboard. public List<List<string>> Lines { get; } Property Value List<List<string>> Placement Gets the title of the dashboard. public override Placement Placement { get; } Property Value Placement Title Gets the title of the dashboard. public static string Title { get; } Property Value string Width This property returns the width of the dashboard. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the type of borders to be used in the dashboard. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new type of borders to be used in the dashboard. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the dashboard. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the dashboard. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.ElementsList.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.ElementsList.html",
    "title": "Class ElementsList | ConsoleAppVisuals",
    "summary": "Class ElementsList Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The ElementsList is a passive element that displays a list of all the elements types available. public class ElementsList : PassiveElement Inheritance object Element PassiveElement ElementsList Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors ElementsList(ElementType, Placement, BordersType) The ElementsList is a passive element that displays a list of all the elements types available. public ElementsList(ElementType elementTypeExpected = ElementType.Default, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters elementTypeExpected ElementType The type of element expected. placement Placement The placement of the InteractiveList. bordersType BordersType The type of borders of the InteractiveList. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders of the InteractiveList. public Borders Borders { get; } Property Value Borders BordersType Gets the type of borders of the InteractiveList. public BordersType BordersType { get; } Property Value BordersType Count Gets the number of lines in the InteractiveList. public int Count { get; } Property Value int ElementsTypeExpected Gets the type of element expected. public ElementType ElementsTypeExpected { get; } Property Value ElementType Headers Gets the headers of the dashboard. public static List<string> Headers { get; } Property Value List<string> Height Gets the height of the InteractiveList. public override int Height { get; } Property Value int Lines Gets the lines of the InteractiveList. public List<List<string>> Lines { get; } Property Value List<List<string>> Placement Gets the title of the InteractiveList. public override Placement Placement { get; } Property Value Placement Title Gets the title of the InteractiveList. public string Title { get; } Property Value string Width Gets the width of the InteractiveList. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the type of borders of the InteractiveList. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new type of borders of the InteractiveList. Remarks For more information, consider visiting the documentation available here. UpdateElementsTypeExpected(ElementType) Updates the type of element expected. public void UpdateElementsTypeExpected(ElementType elementsTypeExpected) Parameters elementsTypeExpected ElementType The new type of element expected. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the InteractiveList. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the InteractiveList. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.EmbedText.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.EmbedText.html",
    "title": "Class EmbedText | ConsoleAppVisuals",
    "summary": "Class EmbedText Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The EmbedText is a passive element that displays text in a box. public class EmbedText : PassiveElement Inheritance object Element PassiveElement EmbedText Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors EmbedText(List<string>, TextAlignment, Placement, BordersType) The EmbedText is a passive element that displays text in a box. public EmbedText(List<string> text, TextAlignment align = TextAlignment.Left, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters text List<string> The text to display. align TextAlignment The alignment of the Embed text. placement Placement The placement of the Embed text element. bordersType BordersType The type of border to display. Remarks For more information, consider visiting the documentation available here. Properties Borders Gets the borders of the Embed text. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the selector. public BordersType BordersType { get; } Property Value BordersType Height Gets the height of the Embed text. public override int Height { get; } Property Value int Lines Gets the rows of the Embed text. public List<string> Lines { get; } Property Value List<string> Placement Gets the position of the Embed text. public override Placement Placement { get; } Property Value Placement TextAlignment Gets the alignment of the Embed text. public override TextAlignment TextAlignment { get; } Property Value TextAlignment TextToDisplay Gets the text to display. public List<string>? TextToDisplay { get; } Property Value List<string> Width Gets the width of the Embed text. public override int Width { get; } Property Value int Methods AddLine(string) Adds a line to the Embed text. public void AddLine(string line) Parameters line string The line to add. Remarks For more information, consider visiting the documentation available here. InsertLine(int, string) Inserts a line to the Embed text. public void InsertLine(int index, string line) Parameters index int The index where to insert the line. line string The line to insert. Remarks For more information, consider visiting the documentation available here. RemoveLine(int) Removes a line from the Embed text. public void RemoveLine(int index) Parameters index int The index of the line to remove. Remarks For more information, consider visiting the documentation available here. RemoveLine(string) Removes a line from the Embed text. public void RemoveLine(string line) Parameters line string The line to remove. Remarks For more information, consider visiting the documentation available here. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the borders of the Embed text. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new border type of the Embed text. Remarks For more information, consider visiting the documentation available here. UpdateLines(List<string>) Updates the text of the Embed text. public void UpdateLines(List<string> newText) Parameters newText List<string> The new text of the Embed text. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the Embed text. public void UpdatePlacement(Placement newPlacement) Parameters newPlacement Placement The new placement of the Embed text. Remarks For more information, consider visiting the documentation available here. UpdateTextAlignment(TextAlignment) Updates the alignment of the Embed text. public void UpdateTextAlignment(TextAlignment newAlignment) Parameters newAlignment TextAlignment The new alignment of the Embed text. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Footer.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Footer.html",
    "title": "Class Footer | ConsoleAppVisuals",
    "summary": "Class Footer Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Footer is a passive element that displays a footer on the console. public class Footer : PassiveElement Inheritance object Element PassiveElement Footer Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Footer(string, string, string) The Footer is a passive element that displays a footer on the console. public Footer(string leftText = \"Footer Left\", string centerText = \"Footer Center\", string rightText = \"Footer Right\") Parameters leftText string The text on the left of the footer. centerText string The text in the center of the footer. rightText string The text on the right of the footer. Remarks For more information, consider visiting the documentation available here. Properties Height Gets the height of the footer. public override int Height { get; } Property Value int MaxNumberOfThisElement Gets the maximum number of this element. public override int MaxNumberOfThisElement { get; } Property Value int Placement Gets the placement of the footer. public override Placement Placement { get; } Property Value Placement Text Gets the text of the footer. public (string, string, string) Text { get; } Property Value (string, string, string) Width Gets the width of the footer. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateCenterText(string) Updates the text in the center of the footer. public void UpdateCenterText(string centerText) Parameters centerText string The new text in the center of the footer. Remarks For more information, consider visiting the documentation available here. UpdateLeftText(string) Updates the text on the left of the footer. public void UpdateLeftText(string leftText) Parameters leftText string The new text on the left of the footer. Remarks For more information, consider visiting the documentation available here. UpdateRightText(string) Updates the text on the right of the footer. public void UpdateRightText(string rightText) Parameters rightText string The new text on the right of the footer. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Header.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Header.html",
    "title": "Class Header | ConsoleAppVisuals",
    "summary": "Class Header Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Header is a passive element that displays a header on the console. public class Header : PassiveElement Inheritance object Element PassiveElement Header Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Header(string, string, string, int) The Header is a passive element that displays a header on the console. public Header(string leftText = \"Header Left\", string centerText = \"Header Center\", string rightText = \"Header Right\", int margin = 1) Parameters leftText string The text on the left of the header. centerText string The text in the center of the header. rightText string The text on the right of the header. margin int The margin of the header. Remarks For more information, consider visiting the documentation available here. Properties Height Gets the height of the header. public override int Height { get; } Property Value int Margin Gets the margin of the header. public int Margin { get; } Property Value int MaxNumberOfThisElement Gets the maximum number of this element. public override int MaxNumberOfThisElement { get; } Property Value int Placement Gets the placement of the header. public override Placement Placement { get; } Property Value Placement Text Gets the text of the header. public (string, string, string) Text { get; } Property Value (string, string, string) Width Gets the width of the header. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateCenterText(string) Updates the text in the center of the header. public void UpdateCenterText(string centerText) Parameters centerText string The new text in the center of the header. Remarks For more information, consider visiting the documentation available here. UpdateLeftText(string) Updates the text on the left of the header. public void UpdateLeftText(string leftText) Parameters leftText string The new text on the left of the header. Remarks For more information, consider visiting the documentation available here. UpdateMargin(int) Updates the margin of the header. public void UpdateMargin(int margin) Parameters margin int The new margin of the header. Remarks For more information, consider visiting the documentation available here. UpdateRightText(string) Updates the text on the right of the header. public void UpdateRightText(string rightText) Parameters rightText string The new text on the right of the header. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.HeightSpacer.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.HeightSpacer.html",
    "title": "Class HeightSpacer | ConsoleAppVisuals",
    "summary": "Class HeightSpacer Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The HeightSpacer is a passive element that displays a space between elements with a fixed height. public class HeightSpacer : PassiveElement Inheritance object Element PassiveElement HeightSpacer Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.Width Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors HeightSpacer(int, Placement) The HeightSpacer is a passive element that displays a space between elements with a fixed height. public HeightSpacer(int height = 1, Placement placement = Placement.TopCenter) Parameters height int The height of the spacer. placement Placement The placement of the spacer. Remarks For more information, consider visiting the documentation available here. Properties Height Gets the height of the spacer. public override int Height { get; } Property Value int Placement Gets the placement of the spacer. public override Placement Placement { get; } Property Value Placement Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateHeight(int) Updates the height of the spacer. public void UpdateHeight(int newHeight) Parameters newHeight int The new height of the spacer. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the new height is negative or greater than the window height. UpdatePlacement(Placement) Updates the placement of the spacer. public void UpdatePlacement(Placement newPlacement) Parameters newPlacement Placement The new placement of the spacer. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Matrix-1.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Matrix-1.html",
    "title": "Class Matrix<T> | ConsoleAppVisuals",
    "summary": "Class Matrix<T> Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Matrix<T> is a passive element that displays a matrix on the console. public class Matrix<T> : PassiveElement Type Parameters T Inheritance object Element PassiveElement Matrix<T> Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Matrix(List<List<T?>>?, Placement, BordersType) The Matrix<T> is a passive element that displays a matrix on the console. public Matrix(List<List<T?>>? rawLines = null, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters rawLines List<List<T>> The matrix to be used. placement Placement The placement of the matrix. bordersType BordersType The type of borders to use for the matrix. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the matrix is empty or not compatible (lines are not of the same length). Properties Borders The border characters to use for the matrix. public Borders Borders { get; } Property Value Borders BordersType The border type of the selector. public BordersType BordersType { get; } Property Value BordersType Count Gets the number of lines in the matrix. public int Count { get; } Property Value int Height Gets the height of the matrix. public override int Height { get; } Property Value int Placement Gets the placement of the matrix. public override Placement Placement { get; } Property Value Placement Width Gets the width of the matrix. public override int Width { get; } Property Value int Methods AddLine(List<T?>) Adds a line to the matrix. public bool AddLine(List<T?> line) Parameters line List<T> The line to add. Returns bool True if the line has been added successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when the line is not of the same length as the other lines. GetItem(Position) Gets the element at the specified position. public T? GetItem(Position position) Parameters position Position The position of the element. Returns T The element at the specified position. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the position is out of range. InsertLine(int, List<T?>) Inserts a line at the specified index. public bool InsertLine(int index, List<T?> line) Parameters index int The index of the line to insert. line List<T> The line to insert. Returns bool True if the line has been inserted successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. ArgumentException Thrown when the line is not of the same length as the other lines. RemoveItem(Position) Removes an element from the matrix. public bool RemoveItem(Position position) Parameters position Position The position of the element to remove. Returns bool True if the element has been removed successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the position is out of range. RemoveLine(int) Removes a line from the matrix. public bool RemoveLine(int index) Parameters index int The index of the line to remove. Returns bool True if the line has been removed successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateBordersType(BordersType) Updates the borders of the matrix. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The new border type of the matrix. Remarks For more information, consider visiting the documentation available here. UpdateItem(Position, T) Updates an element in the matrix. public bool UpdateItem(Position position, T item) Parameters position Position The position of the element to update. item T The new element. Returns bool True if the element has been updated successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the position is out of range. UpdateLine(int, List<T?>) Updates a line in the matrix. public bool UpdateLine(int index, List<T?> line) Parameters index int The index of the line to update. line List<T> The new line. Returns bool True if the line has been updated successfully, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. ArgumentException Thrown when the line is not of the same length as the other lines. UpdatePlacement(Placement) Updates the placement of the matrix. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the matrix. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.TableView.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.TableView.html",
    "title": "Class TableView | ConsoleAppVisuals",
    "summary": "Class TableView Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The TableView is a passive element that displays a table on the console. public class TableView : PassiveElement Inheritance object Element PassiveElement TableView Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors TableView(string?, List<string>?, List<List<string>>?, Placement, BordersType) The TableView is a passive element that displays a table on the console. public TableView(string? title = null, List<string>? headers = null, List<List<string>>? lines = null, Placement placement = Placement.TopCenter, BordersType bordersType = BordersType.SingleStraight) Parameters title string The title of the table. headers List<string> The headers of the table. lines List<List<string>> The lines of the table. placement Placement The placement of the table. bordersType BordersType The type of borders to use for the table. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Is thrown when the number of columns in the table is not consistent with itself or with the headers. NullReferenceException Is thrown when no body lines were provided. Properties Borders Gets the borders of the table. public Borders Borders { get; } Property Value Borders BordersType Gets the border type of the selector. public BordersType BordersType { get; } Property Value BordersType Count Gets the number of lines in the table. public int Count { get; } Property Value int GetRawHeaders Gets the headers of the table. public List<string>? GetRawHeaders { get; } Property Value List<string> GetRawLines Gets the lines of the table. public List<List<string>>? GetRawLines { get; } Property Value List<List<string>> Height Gets the height of the table. public override int Height { get; } Property Value int Placement Gets the title of the table. public override Placement Placement { get; } Property Value Placement Width Gets the width of the table. public override int Width { get; } Property Value int Methods AddHeaders(List<string>) Adds headers to the table. public void AddHeaders(List<string> headers) Parameters headers List<string> The headers to add. Remarks For more information, consider visiting the documentation available here. AddLine(List<string>) Adds a line to the table. public void AddLine(List<string> line) Parameters line List<string> The line to add. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Is thrown when the number of columns in the table is not consistent with itself or with the headers. AddTitle(string) Adds a title to the table. public void AddTitle(string title) Parameters title string The title to add. Remarks For more information, consider visiting the documentation available here. ClearHeaders() Clears the headers of the table. public void ClearHeaders() Remarks For more information, consider visiting the documentation available here. ClearLines() Clears the lines of the table. public void ClearLines() Remarks For more information, consider visiting the documentation available here. ClearTitle() Clears the title of the table. public void ClearTitle() Remarks For more information, consider visiting the documentation available here. GetColumnData(int) Gets all the elements from a column given its index. public List<string>? GetColumnData(int index) Parameters index int The index of the column. Returns List<string> The elements of the column. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Is thrown when the index is out of range. GetColumnData(string) Gets all the elements from a column given its header. public List<string>? GetColumnData(string header) Parameters header string The header of the column. Returns List<string> The elements of the column. Remarks For more information, consider visiting the documentation available here. Exceptions InvalidOperationException Is thrown when the table is empty. ArgumentOutOfRangeException Is thrown when the header is invalid. GetLine(int) Gets the specified line in the table. public List<string> GetLine(int index) Parameters index int The index of the line to return. Returns List<string> The line at the specified index. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Is thrown when the index is out of range. RemoveLine(int) Removes a line from the table. public void RemoveLine(int index) Parameters index int The index of the line to remove. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Is thrown when the index is out of range. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() Reset() Clears the table. public void Reset() Remarks For more information, consider visiting the documentation available here. UpdateBordersType(BordersType) Updates the borders of the table. public void UpdateBordersType(BordersType bordersType) Parameters bordersType BordersType The type of border to use for the table. Remarks For more information, consider visiting the documentation available here. UpdateHeaders(List<string>) Updates the headers of the table. public void UpdateHeaders(List<string> headers) Parameters headers List<string> The headers to update. Remarks For more information, consider visiting the documentation available here. UpdateLine(int, List<string>) Updates a line in the table. public void UpdateLine(int index, List<string> line) Parameters index int The index of the line to update. line List<string> The new line. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Is thrown when the index is out of range. ArgumentException Is thrown when the number of columns in the table is not consistent with itself or with the headers. UpdatePlacement(Placement) Updates the placement of the table. public void UpdatePlacement(Placement placement) Parameters placement Placement The new placement of the table. Remarks For more information, consider visiting the documentation available here. UpdateTitle(string) Updates the title of the table. public void UpdateTitle(string title) Parameters title string The title to update. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Text.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Text.html",
    "title": "Class Text | ConsoleAppVisuals",
    "summary": "Class Text Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Text is an passive element that displays one or multiple lines of text. public class Text : PassiveElement Inheritance object Element PassiveElement Text Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.MaxNumberOfThisElement Element.Line object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Text(List<string>, TextAlignment, Placement) The Text is an passive element that displays one or multiple lines of text. public Text(List<string> lines, TextAlignment align = TextAlignment.Left, Placement placement = Placement.TopCenter) Parameters lines List<string> The text to display. align TextAlignment The alignment of the Text element. placement Placement The placement of the Text element. Remarks For more information, consider visiting the documentation available here. Properties Height Gets the height of the Text element. public override int Height { get; } Property Value int Lines Gets the text of the Text element. public List<string> Lines { get; } Property Value List<string> Placement Gets the position of the Text element. public override Placement Placement { get; } Property Value Placement TextAlignment Gets the alignment of the Text element. public override TextAlignment TextAlignment { get; } Property Value TextAlignment TextToDisplay Gets the text to display. public List<string>? TextToDisplay { get; } Property Value List<string> Width Gets the width of the Text element. public override int Width { get; } Property Value int Methods AddLine(string) Adds a line to the Text element. public void AddLine(string line) Parameters line string The line to add. Remarks For more information, consider visiting the documentation available here. InsertLine(int, string) Inserts a line to the Text element. public void InsertLine(int index, string line) Parameters index int The index where to insert the line. line string The line to insert. Remarks For more information, consider visiting the documentation available here. RemoveLine(int) Removes a line from the Text element. public void RemoveLine(int index) Parameters index int The index of the line to remove. Remarks For more information, consider visiting the documentation available here. RemoveLine(string) Removes a line from the Text element. public void RemoveLine(string line) Parameters line string The line to remove. Remarks For more information, consider visiting the documentation available here. RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateLines(List<string>) Updates the lines of the Text element. public void UpdateLines(List<string> lines) Parameters lines List<string> The new text of the Text element. Remarks For more information, consider visiting the documentation available here. UpdatePlacement(Placement) Updates the placement of the Text element. public void UpdatePlacement(Placement newPlacement) Parameters newPlacement Placement The new placement of the Text element. Remarks For more information, consider visiting the documentation available here. UpdateTextAlignment(TextAlignment) Updates the alignment of the Text element. public void UpdateTextAlignment(TextAlignment newAlignment) Parameters newAlignment TextAlignment The new alignment of the Text element. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.Title.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.Title.html",
    "title": "Class Title | ConsoleAppVisuals",
    "summary": "Class Title Namespace ConsoleAppVisuals.PassiveElements Assembly ConsoleAppVisuals.dll The Title is a passive element that displays a title on the console. public class Title : PassiveElement Inheritance object Element PassiveElement Title Inherited Members PassiveElement.Type Element.ToggleVisibility() Element.RenderElement() Element.RenderOptionsBeforeHand() Element.RenderOptionsAfterHand() Element.RenderElementSpace(bool) Element.GetRenderSpace() Element.Clear() Element.Id Element.Visibility Element.TextAlignment object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Constructors Title(string, int, TextAlignment, Font, string?) The Title is a passive element that displays a title on the console. public Title(string text, int margin = 1, TextAlignment align = TextAlignment.Center, Font font = Font.ANSI_Shadow, string? fontPath = null) Parameters text string The text of the title. margin int The margin of the title. align TextAlignment The alignment of the title. font Font The font of the title. fontPath string ATTENTION: fill this parameter only if you want to use a custom font (Font.Custom). Remarks For more information, consider visiting the documentation available here. Properties Font Gets the font of the title. public Font Font { get; } Property Value Font Height Gets the height of the title. public override int Height { get; } Property Value int Line Gets the line of the title. public override int Line { get; } Property Value int MaxNumberOfThisElement Gets the maximum number of this element. public override int MaxNumberOfThisElement { get; } Property Value int Placement Gets the placement of the title. public override Placement Placement { get; } Property Value Placement StyledText Gets the styled text of the title. public string[] StyledText { get; } Property Value string[] Styler Gets the text styler of the title. public TextStyler Styler { get; } Property Value TextStyler Width Gets the width of the title. public override int Width { get; } Property Value int Methods RenderElementActions() Defines the actions to perform when the element is called to be rendered on the console. [Visual] protected override void RenderElementActions() UpdateAlignment(TextAlignment) Updates the alignment of the title. public void UpdateAlignment(TextAlignment align) Parameters align TextAlignment The new alignment of the title. Remarks For more information, consider visiting the documentation available here. UpdateFont(Font, string?) Updates the font of the title. public void UpdateFont(Font font, string? fontPath = null) Parameters font Font The new font of the title. fontPath string ATTENTION: fill this parameter only if you want to use a custom font (Font.Custom). Remarks For more information, consider visiting the documentation available here. UpdateMargin(int) Updates the margin of the title. public void UpdateMargin(int margin) Parameters margin int The new margin of the title. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException The margin must be between 0 and the half of the console height. UpdateText(string) Updates the text of the title. public void UpdateText(string text) Parameters text string The new text of the title. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.PassiveElements.html": {
    "href": "3-references/ConsoleAppVisuals.PassiveElements.html",
    "title": "Namespace ConsoleAppVisuals.PassiveElements | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals.PassiveElements Classes ASCIIArt The ASCIIArt is a passive element that displays ASCII art from a file or string content. Banner The Banner is a passive element that displays a banner on the console. ElementsDashboard The ElementsDashboard is a passive element that displays a dashboard of all the elements currently in the Window class. ElementsList The ElementsList is a passive element that displays a list of all the elements types available. EmbedText The EmbedText is a passive element that displays text in a box. Footer The Footer is a passive element that displays a footer on the console. Header The Header is a passive element that displays a header on the console. HeightSpacer The HeightSpacer is a passive element that displays a space between elements with a fixed height. Matrix<T> The Matrix<T> is a passive element that displays a matrix on the console. TableView The TableView is a passive element that displays a table on the console. Text The Text is an passive element that displays one or multiple lines of text. Title The Title is a passive element that displays a title on the console."
  },
  "3-references/ConsoleAppVisuals.Window.html": {
    "href": "3-references/ConsoleAppVisuals.Window.html",
    "title": "Class Window | ConsoleAppVisuals",
    "summary": "Class Window Namespace ConsoleAppVisuals Assembly ConsoleAppVisuals.dll The Window class is a collection of methods to manage visual elements stored in itself. You may add, remove, or render elements in the console after adding them to the Window class. public static class Window Inheritance object Window Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks For more information, consider visiting the documentation available here. Fields INTERVAL_BETWEEN_READS Defines the interval of milliseconds between different read key of the console (used in the Freeze(ConsoleKey) method). public const int INTERVAL_BETWEEN_READS = 10 Field Value int Properties CountElements Gets the number of elements currently stored in the window. public static int CountElements { get; } Property Value int Elements Gets the list of elements stored in the window. public static List<Element> Elements { get; } Property Value List<Element> NextId Gets the next id number each time a new element is added to the window. public static int NextId { get; } Property Value int Methods ActivateAllElements() Attempts to toggle the visibility of all Element in the window if the element fits the max number constraint. public static void ActivateAllElements() Remarks For more information, consider visiting the documentation available here. ActivateElement(Element, bool) Attempts to toggle the visibility of the given Element if it fits the max number constraint. The element will be rendered if the render parameter is true. [Visual] public static void ActivateElement(Element element, bool render = true) Parameters element Element The Element to be activated. render bool If true, the Element will be rendered. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the element is invalid. ActivateElement(int, bool) Attempts to toggle the visibility of the Element with the given id if the element fits the max number constraint. The element will be rendered if the render parameter is true. [Visual] public static void ActivateElement(int id, bool render = true) Parameters id int The id of the Element to activate. render bool If true, the Element will be rendered. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the id is out of the range of the Window elements. ActivateElement<T>(bool) Attempts to toggle the visibility of the first Element with the given type if the element fits the max number constraint. [Visual] public static void ActivateElement<T>(bool render = true) where T : Element Parameters render bool If true, the element will be rendered. Type Parameters T The type of the element. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the element is invalid. AddElement(params Element[]) Adds one or more Element to the window. If the element is passive, it will try to toggle its visibility to true. public static void AddElement(params Element[] elements) Parameters elements Element[] The Element to be added. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentException Thrown when no Element are provided. DuplicateElementException Thrown when the Element is already present in the Window. CheckLine(int?) Checks if the line is not out of the console range. public static int? CheckLine(int? line) Parameters line int? The line to be checked. Returns int? The line if it is valid. Remarks For more information, consider visiting the documentation available here. Exceptions LineOutOfConsoleException Thrown when the line is out of the console range. Clear(bool, int?, int?, int) Clears the console given a range of lines. [Visual] public static bool Clear(bool continuous = false, int? startLine = null, int? length = null, int step = 1) Parameters continuous bool If true, the window will be cleared continuously. startLine int? The start line of the window to be cleared. length int? The number of lines to be cleared. step int The step of the window to be cleared. Returns bool True if the window is successfully cleared, false otherwise. Remarks For more information, consider visiting the documentation available here. Close() Clears the console, show the cursor, and exit the program. [Visual] public static void Close() Remarks For more information, consider visiting the documentation available here. DeactivateAllElements(bool) This method deactivate the visibility of all Element. public static void DeactivateAllElements(bool clear = true) Parameters clear bool Remarks For more information, consider visiting the documentation available here. DeactivateElement(Element, bool) Deactivates the visibility of the given Element. The console space taken by the element will be cleared if the clear parameter is true. public static void DeactivateElement(Element element, bool clear = true) Parameters element Element The Element to be deactivated. clear bool If true, the Element space will be cleared from the console. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the element is invalid. DeactivateElement(int, bool) Deactivates the visibility of the Element with the given id. The console space taken by the element will be cleared if the clear parameter is true. public static void DeactivateElement(int id, bool clear = true) Parameters id int The id of the Element. clear bool If true, the Element space will be cleared from the console. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the id is out of the range of the Window elements. DeactivateElement<T>(bool) Deactivates the visibility of the first Element with the given type. The console space taken by the element will be cleared if the clear parameter is true. public static void DeactivateElement<T>(bool clear = true) where T : Element Parameters clear bool If true, the element will be cleared. Type Parameters T The type of the element. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the element is invalid. Freeze(ConsoleKey) Freezes the execution of the program until the given key is pressed. [Visual] public static void Freeze(ConsoleKey key = ConsoleKey.Enter) Parameters key ConsoleKey The key to be pressed to continue the execution. Remarks For more information, consider visiting the documentation available here. GetElement<T>() Gets the first Element of the given type present in the Window. public static T? GetElement<T>() where T : Element Returns T The element with the given type if it exists, null otherwise. Type Parameters T The type of the element. Remarks For more information, consider visiting the documentation available here. GetElement<T>(int) Gets the Element with the given id in the Window. public static T? GetElement<T>(int id) where T : Element Parameters id int The id of the element. Returns T The Element with the given id if it exists, null otherwise. Type Parameters T Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the id is out of the range of the Window elements. GetLineAvailable(Placement) Gets the last line available to render an Element on the console given a placement. public static int GetLineAvailable(Placement placement) Parameters placement Placement The placement to get the line. Returns int The last line available to render an Element on the console. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the placement is invalid. GetVisibleElement<T>() Gets the visible Element with the given type in the Window. public static T? GetVisibleElement<T>() where T : Element Returns T The visible Element with the given type if it exists, null otherwise. Type Parameters T The type of the element. Remarks For more information, consider visiting the documentation available here. InsertElement(Element, int) Inserts an Element at the given id in the Window. public static void InsertElement(Element element, int id) Parameters element Element The Element to be inserted. id int The target id to insert the element. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the id is out of the range of the Window elements. IsElementActivatable(int) Tests if an Element given by an id can be activated public static bool IsElementActivatable(int id) Parameters id int The id of the Element to test. Returns bool True if the Element can be activated, false otherwise. Remarks For more information, consider visiting the documentation available here. Open() Clears the console and hide the cursor. [Visual] public static void Open() Remarks For more information, consider visiting the documentation available here. Range(int, int) Collects a range of Element given a start id and a count. public static List<Element> Range(int index, int count) Parameters index int The start id of the range. count int The number of elements to be collected. Returns List<Element> The list of Element given a range of ids. Remarks For more information, consider visiting the documentation available here. RemoveAllElements() Removes all Element from the window. public static void RemoveAllElements() Remarks For more information, consider visiting the documentation available here. RemoveElement(params Element[]) Removes one or more Element from the Window. public static bool RemoveElement(params Element[] elements) Parameters elements Element[] The Element to be removed. Returns bool True if the element is successfully removed, false otherwise. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the Element is not found in the Window. RemoveElement(int) Removes the Element with the given id from the Window. public static void RemoveElement(int id) Parameters id int The id of the element to be removed. Remarks For more information, consider visiting the documentation available here. Exceptions ArgumentOutOfRangeException Thrown when the id is out of the range of the Window elements. RemoveElement<T>() Removes the first Element of the given type from the Window. public static bool RemoveElement<T>() where T : Element Returns bool True if the element is successfully removed, false otherwise. Type Parameters T The type of the element. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the Element is not found in the Window. Render() Displays all the visible Element in the window. [Visual] public static void Render() Remarks For more information, consider visiting the documentation available here. Render(params Element[]) Displays the given Element in the window. [Visual] public static void Render(params Element[] elements) Parameters elements Element[] The Element to be displayed. Remarks For more information, consider visiting the documentation available here. Exceptions ElementNotFoundException Thrown when the element is not found in the Window. RenderElementsSpace(bool) Renders the space of all visible Element in the window. May ignore the visibility to display the hidden Element spaces. [Visual] public static bool RenderElementsSpace(bool ignoreVisibility = false) Parameters ignoreVisibility bool If true, the space of the hidden Element will be drawn. Returns bool True if the space of the Element is successfully drawn, false otherwise. Remarks For more information, consider visiting the documentation available here."
  },
  "3-references/ConsoleAppVisuals.html": {
    "href": "3-references/ConsoleAppVisuals.html",
    "title": "Namespace ConsoleAppVisuals | ConsoleAppVisuals",
    "summary": "Namespace ConsoleAppVisuals Classes Core The Core class is a collection of low-level methods responsible of all the interactions between the library and the console (e.g. changing colors, writing text, etc.). Window The Window class is a collection of methods to manage visual elements stored in itself. You may add, remove, or render elements in the console after adding them to the Window class."
  },
  "3-references/index.html": {
    "href": "3-references/index.html",
    "title": "Getting started | ConsoleAppVisuals",
    "summary": "Getting started This section describes all references of the library. You will find all arguments, method signatures, classes, and enums that are available for the user. Access to the namespaces classes and functions at the left side of this page. Warning Adding using ConsoleAppVisuals; at the beginning of your C# file is necessary but not sufficient to use the full potential of the library. Refer to the descriptions below to discover which namespaces to add to your project and the Introduction section to see how they are used. Namespace descriptions Namespaces are used to organize the classes and interfaces of the library. They are used to avoid naming conflicts and to group the classes that are related to each other. Here are the different namespaces of the library: ConsoleAppVisuals using ConsoleAppVisuals.Elements; This is the main namespace of the library. It contains the Core and Window classes. The Core class is the core of the library interaction with the console. It contains the methods to interact with the console on a low level basis. The Window class is used to manage visual elements. You may use it to add, remove, update and display elements on the console. PassiveElements using ConsoleAppVisuals.PassiveElements; This namespace contains all the passive elements of the library. You may find the elements that do not provide interaction with the user and that you may display several from the same type at the same time. They share common characteristics and methods defined in the models/Element.cs class. InteractiveElements using ConsoleAppVisuals.InteractiveElements; This namespace contains all the interactive elements of the library. You may find the elements that provide interaction with the user and that you may display only one at a time. They share common characteristics and methods defined in the models/InteractiveElement.cs class. Enums using ConsoleAppVisuals.Enums; This namespace contains all the enumerations used in the library. They are used to define the behaviors, position, response of the elements in the console. Models using ConsoleAppVisuals.Models; This namespace contains all the models of the library. They are used to define the characteristics of the elements and the interactions. You may find the Element, InteractiveElement classes for example. Attributes using ConsoleAppVisuals.Attributes; This namespace contains the VisualAttribute class. This attribute is used to ignore the element when calculating coverage since untestable. Errors using ConsoleAppVisuals.Errors; This namespace contains all the custom exceptions of the library. They are used to handle specific errors that may occur during the execution of the library. Bonus: GlobalUsings.cs This file contains the different usings of the library. It is used to import the different classes of the library and enable them globally in the library. I recommend you to do the same in your projects. See file Structure Here is the detailed file structure of the library: ConsoleAppVisuals ├───elements │ ├───animated │ │ ├───FakeLoadingBar.cs │ │ └───LoadingBar.cs │ ├───interactive │ │ ├───FloatSelector.cs │ │ ├───IntSelector.cs │ │ ├───Prompt.cs │ │ ├───Dialog.cs │ │ ├───ScrollingMenu.cs │ │ └───TableSelector.cs │ └───passive │ ├───inspectors │ │ ├───ElementsList.cs │ │ └───ElementsDashboard.cs │ ├───EmbedText.cs │ ├───Text.cs │ ├───Matrix.cs │ ├───TableView.cs │ ├───Banner.cs │ ├───Header.cs │ ├───Footer.cs │ └───Title.cs ├───attributes │ └───VisualAttribute.cs ├───enums │ ├───BordersType.cs │ ├───DialogOption.cs │ ├───Direction.cs │ ├───ElementType.cs │ ├───Font.cs │ ├───Placement.cs │ ├───PromptInputStyle.cs │ ├───Status.cs │ └───TextAlignment.cs ├───errors │ ├───EmptyFileException.cs │ ├───LineOutOfConsoleException.cs │ ├───DuplicateElementException.cs │ ├───ElementNotFoundException.cs │ └───NotSupportedCharException.cs ├───models │ ├───Element.cs │ ├───AnimatedElement.cs │ ├───PassiveElement.cs │ ├───Borders.cs │ ├───InteractiveElement.cs │ ├───InteractionEventArgs.cs │ ├───Position.cs │ ├───TextStyler.cs │ └───FontYamlFile.cs ├───Core.cs ├───Window.cs └───GlobalUsings.cs Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/ext-banking.html": {
    "href": "4-examples/ext-banking.html",
    "title": "BankingExplorer | ConsoleAppVisuals",
    "summary": "BankingExplorer Author Size Library version Source files MorganKryze medium 3.3.0 link Introduction The BankingExplorer project is a simple console application that demonstrates the use of the library to create a banking assistant. You may store expenses and incomes, archive your data and view different accounts. Features covered The project covers the following features: General: Create and use PassiveElement and InteractiveElement PassiveElements: Title, Header & Footer, EmbedText (formerly Interactive) InteractiveElements: ScrollingMenu, Prompt, TableSelector AnimatedElements: FakeLoadingBar Build & Run Install To clone the project, run the following command: git clone https://github.com/MorganKryze/BankingExplorer.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./BankingExplorer). Then move to the working directory: cd src/BankingExplorer Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. License MIT License Copyright (c) 2023 MorganKryze Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/ext-boggle.html": {
    "href": "4-examples/ext-boggle.html",
    "title": "Boggle, a word game | ConsoleAppVisuals",
    "summary": "Boggle : a word game Author Size Library version Source files Eliott A. Roussille big v3.5.4 Boggle Introduction Boggle is a word game where players try to find as many words as possible from a grid of letters. Features covered The project covers the following features: PassiveElements: Text, EmbedText, Title, Header & Footer, Matrix InteractiveElements: Prompt, IntSelector AnimatedElements: FakeLoadingBar Build & Run Install To clone the project, run the following command: git clone https://github.com/aust-1/Boggle.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./src/Boggle). Then move to the working directory: cd src/Boggle Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. License MIT License Copyright (c) 2025 Austin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/index.html": {
    "href": "4-examples/index.html",
    "title": "Table of content | ConsoleAppVisuals",
    "summary": "Table of content Introduction In this section, you will find internal and external example projects that use the ConsoleAppVisuals library. Feel free to explore them as you like and use them as a reference for your own projects. Each one will guide you through the setup and execution of the project, as well as provide a brief explanation of the purpose of the project. Contributing If you use the ConsoleAppVisuals library in your project and would like to share it with the community, feel free to reach us at morgan@kodelab.fr. Before you do, make sure to do the following: Read the contribution guidelines Use the latest or recent version of the library Ensure that your code is clean and understandable (documentation is not mandatory but appreciated) Capture a GIF or Snapshot demo of your project Add a license to your project [OPTIONAL]: Follow the template provided here. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/int-element.html": {
    "href": "4-examples/int-element.html",
    "title": "CustomElement | ConsoleAppVisuals",
    "summary": "Custom Element Author Size Library version Source files MorganKryze small latest link Introduction The CustomElement example demonstrates the use of the library to create a custom element (Passive or Interactive) that can be used in a Console application. Features covered The project covers the following features: General: Create and use PassiveElement and InteractiveElement PassiveElements: Title, Header & Footer InteractiveElements: ScrollingMenu Build & Run Install To clone the project, run the following command: git clone https://github.com/MorganKryze/ConsoleAppVisuals.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./ConsoleAppVisuals). Then move to the working directory: cd examples/CustomElement Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/int-font.html": {
    "href": "4-examples/int-font.html",
    "title": "CustomFont | ConsoleAppVisuals",
    "summary": "Custom Font Author Size Library version Source files MorganKryze small latest link Introduction The CustomFont example demonstrates the use of the library to create a custom font that can be used in a Console application. Features covered The project covers the following features: General: Create and use custom fonts PassiveElements: Title, Header & Footer InteractiveElements: ScrollingMenu, Dialog Build & Run Install To clone the project, run the following command: git clone https://github.com/MorganKryze/ConsoleAppVisuals.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./ConsoleAppVisuals). Then move to the working directory: cd examples/CustomFont Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/int-password.html": {
    "href": "4-examples/int-password.html",
    "title": "Password Manager | ConsoleAppVisuals",
    "summary": "Password Manager Author Size Library version Source files MorganKryze medium latest link Introduction The PasswordManager example is a simple console application that allows the user to manage a list of passwords (non-secure). The user can add, remove, and update passwords. The application uses the Prompt element to hide the password characters when the user enters them. Features covered The project covers the following features: General: use of Prompt properties (secrecy), update of password list, menus management PassiveElements: Title, Header & Footer, TableView InteractiveElements: ScrollingMenu, Dialog, Prompt, TableSelector AnimatedElements: FakeLoadingBar Build & Run Install To clone the project, run the following command: git clone https://github.com/MorganKryze/ConsoleAppVisuals.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./ConsoleAppVisuals). Then move to the working directory: cd examples/PasswordManager Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "4-examples/int-presentation.html": {
    "href": "4-examples/int-presentation.html",
    "title": "Presentation | ConsoleAppVisuals",
    "summary": "Presentation Author Size Library version Source files MorganKryze medium latest link Introduction The Presentation project serves the purpose to demonstrate the capabilities of the library gathering the major features in a single application. Features covered The project covers the following features: General: Change Title font, update elements, menus management PassiveElements: Title, Header & Footer, Matrix, TableView InteractiveElements: ScrollingMenu, Dialog, Prompt, IntSelector, TableSelector AnimatedElements: FakeLoadingBar, LoadingBar Inspector PassiveElement: ElementDashboard, ElementsList Build & Run Install To clone the project, run the following command: git clone https://github.com/MorganKryze/ConsoleAppVisuals.git Or alternatively, download the project as a zip file from the repository. Setup Versions The project is built with the latest version of the library. The project is built with the net9.0 and net8.0 target framework. Some changes should be applied to the project to make it compatible with the net6.0 or net7.0 target frameworks. Check your local .NET SDK version by running the following command: dotnet --version Build To build the project, open a terminal in the project directory (./ConsoleAppVisuals). Then move to the working directory: cd examples/Presentation Finally, run the following command: dotnet build Run If the build is successful, run the following command: dotnet run The application should start and display the same result as in the demonstration video. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/create_docs.html": {
    "href": "5-articles/create_docs.html",
    "title": "Create your project documentation | ConsoleAppVisuals",
    "summary": "Create your project documentation Introduction This article will guide you through the process of creating a documentation for your C# project using the tool DocFX. Documentation is key to help user understand how to use the tools you create. It is also a good way to show the quality of your work. Prerequisites Having looked at the project from the Introduction section .NET 6.0 or later Install DocFX Ensure that you have dotnet (C#) installed by running: dotnet --version To install docfx, or update it, open any terminal and run the following command: dotnet tool update -g docfx Setup workspace As we are taking back the Introduction project to set the example, here is the file structure before generating the documentation: Example_project <-- root └───MyApp ├───bin ├───MyApp.csproj └───Program.cs Open a terminal to the root of the project(the end of your path should be Example_project/), and run the following command: docfx init -y -o documentation Now you should have a new folder called \"documentation\" in the root of your project. Your folder structure should look like this (files are specified with the dots): Example_project <-- root ├───documentation │ ├───docs │ │ ├───getting-started.md │ │ ├───introduction.md │ │ └───toc.yml │ ├───docfx.json │ ├───index.md │ └───toc.yml └───MyApp ├───bin ├───MyApp.csproj └───Program.cs Here should be the default content of docfx.json: { \"metadata\": [ { \"src\": [ { \"src\": \"../src\", \"files\": [\"**/*.csproj\"] } ], \"dest\": \"api\" } ], \"build\": { \"content\": [ { \"files\": [\"**/*.{md,yml}\"], \"exclude\": [\"_site/**\"] } ], \"resource\": [ { \"files\": [\"img/**\"] } ], \"output\": \"_site\", \"template\": [\"default\", \"modern\"], \"globalMetadata\": { \"_appName\": \"\", \"_appTitle\": \"\", \"_enableSearch\": true, \"pdf\": true } } } For a more convenient display, features and to target to the project, I recommend you to update the file to the version below. For more information, see the official documentation of the references tags. { \"metadata\": [ { \"src\": [ { \"src\": \"../MyApp\", \"files\": [\"**/*.csproj\"] } ], \"dest\": \"api\" } ], \"build\": { \"content\": [ { \"files\": [\"**/*.{md,yml}\"], \"exclude\": [\"_site/**\"] } ], \"output\": \"_site\", \"resource\": [\"assets/**\"], \"template\": [\"default\", \"modern\"], \"keepFileLink\": false, \"disableGitFeatures\": false, \"globalMetadata\": { \"_appName\": \"MyApp\", \"_appTitle\": \"MyApp\", \"_appFooter\": \"Copyright (C) 2024 Your Name\", \"_enableSearch\": true, \"_disableContribution\": true, \"pdf\": true } } } Note You may want to select the channel of the documentation you want to generate. For example, if you want to generate the documentation for the Debug or Release version only. Feel free to update files to Debug or Release and TargetFramework to your dotnet version(available in the MyApp.csproj). ... \"metadata\": [ { \"src\": [ { \"src\": \"../MyApp\", \"files\": [\"**/bin/Debug/**.dll\"] } ], \"dest\": \"api\", \"properties\": { \"TargetFramework\": \"net8.0\" } } ], ... Do not forget to update your compiled files using the dotnet build command: Debug Release dotnet build -c Debug dotnet build -c Release Preview your doc Now, back on your terminal from the root, run the following command: docfx build documentation/docfx.json --serve The output should end like this: ... Serving \".../MyApp/documentation/_site\" on http://localhost:8080. Press Ctrl+C to shut down. Your documentation is now available on http://localhost:8080 if you want to see the preview on localhost. Customize your doc Add sections By default, the only sections available are Docs and Api Documentation. You may want to add more sections to your documentation. To do so, you will have to do fe steps: Add a new folder in the documentation folder. For example, articles. Inside articles, add a index.md file and a toc.yml file. Here is an example of the index.md file: # Articles This is the articles section. You can add articles to explain how to use your library. Here is an example of the toc.yml file: items: - name: Articles href: index.md Note We added the items tag to the toc.yml file. This is the root of the table of contents and will remove the error Incorrect Type. Expected \"TOC\". Now, we need to update the toc.yml file in the documentation folder to add the new section. I recommend adding a homepage mention (will be the landing page when the section is clicked). Here is an example of the toc.yml file: items: - name: Docs href: docs/ - name: API href: api/ - name: Articles href: articles/ homepage: articles/index.md Add pages Now that you know how to create new sections, to add pages you may just add markdown files to the sections folder, and add them to the toc.yml file. Here is an example of the toc.yml file: items: - name: Getting Started href: index.md - name: How to use the library href: how_to_use.md - name: How to publish your work href: how_to_publish.md However you may also be able to create collapsible menu in the toc.yml file. Here is an example of the toc.yml file: items: - name: Getting Started href: index.md - name: Advanced items: - name: How to use the library href: how_to_use.md - name: How to publish your work href: how_to_publish.md Or use another style and display the category name, and the pages without being collapsible: items: - name: Getting Started href: index.md - name: Other pages href: how_to_use.md href: how_to_publish.md Markdown features support DocFX supports a lot of markdown features. All of them are listed in the official documentation. Logo & favicon To add a logo or favicon to your documentation, start by adding them into the assets folder (if you have not, create it in the documentation folder). Then, update the docfx.json file to add the logo and favicon tags. Here is an example: ... \"build\": { ... \"resource\": [\"assets/**\"], \"globalMetadata\": { ... \"_appLogoPath\": \"assets/logo.jpg\", \"_appFaviconPath\": \"assets/favicon.ico\", ... } ... } For both I recommend you using svg files so that the logo and favicon are scalable and will not lose quality. Code documentation Coding in C#, you may be aware of the use of the /// comments to document your code. This is a good practice to help other developers understand your code. DocFX will take these comments into account to generate accurate documentation. Please refer to the official documentation for more information. For docfx to support these metadata, ensure that a documentation file is generated correctly. Add this line to your \"**.csproj\" file, inside the \"PropertyGroup\" tag: <GenerateDocumentationFile>true</GenerateDocumentationFile> Here is a little troubleshooting if you have an error while building the documentation: Check the version of your dotnet. Update docfx. Check the docfx.json path to your project (e.g. ../MyApp). Check if you have well put a namespace in your file. Your program.cs will not be used in the documentation, so you will need to have at least on more class. Here is a quick example to copy/paste in a new file: namespace MyApp; /// <summary> /// Class <c>Point</c> models a point in a two-dimensional plane. /// </summary> public class Point { private int x; private int y; /// <summary> /// Initializes a new instance of the <c>Point</c> class. /// </summary> public Point(int x, int y) { this.x = x; this.y = y; } /// <summary> /// Gets the x-coordinate of the point. /// </summary> public int X { get { return x; } } /// <summary> /// Gets the y-coordinate of the point. /// </summary> public int Y { get { return y; } } /// <summary> /// Returns a string that represents the current object. /// </summary> public override string ToString() { return $\"({x}, {y})\"; } } Now your documentation is ready to be generated in the section API in the generated site (you may change all sections names in your toc.yml file at the root of your documentation folder). Deploy the doc GitHub Pages GitHub provides a service called GitHub Pages that allows you to host static websites directly from your repository. We will need to setup few things before deploying the documentation. First of all, go to your repository settings, then to the \"Pages\" section. Select \"Deploy from branch\", then select the branch \"gh-pages\" branch and the root folder. Then click on \"Save\". If you do not have a \"gh-pages\" branch, you will have to create one (it is better if it is empty at the beginning but it is not mandatory). Deployment Then, you will have to create a new folder called .github at the root of your project. Inside this folder, create a new folder called workflows. Inside this folder, create a new file called deploy_docs.yml. This file will contain the workflow to generate and deploy the documentation on GitHub Pages. Here is an example of the deploy_docs.yml file: name: Deploy docs on: push: branches: - main jobs: publish-docs: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Dotnet Setup uses: actions/setup-dotnet@v3 with: dotnet-version: 8.x - run: dotnet tool update -g docfx - run: docfx documentation/docfx.json - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: docs/_site Push the changes and go to the \"Actions\" section of your repository. You should see a new workflow called \"Deploy docs\". Click on it to see the logs. If everything went well, you should see a \"Deployed\" message at the end of the logs. Now, on every push on the main branch, the documentation will be generated and deployed on GitHub Pages. Note In your github repository description, click on \"Edit\" then for the url select the \"GitHub Pages\" url option. So that your documentation is directly accessible from your repository. Sources DocFX documentation Useful but not official documentation C# documentation comments DocFX markdown support Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/create_element.html": {
    "href": "5-articles/create_element.html",
    "title": "Create your own elements | ConsoleAppVisuals",
    "summary": "Create your own elements Introduction This article will guide you through the process of creating custom visual elements using the library. This will enable you to create passive elements as well as interactive elements that can be used in your applications. Prerequisites .NET framework 6 or later ConsoleAppVisuals library: 3.0.0 or later Having looked at the project from the Introduction section Setup workspace We will take the example project of the Introduction section. As a reminder, here is the file structure of the project: Example_project <-- root └───MyApp ├───bin ├───MyApp.csproj └───Program.cs Passive elements Passive elements are visual elements that do not have any interactive behavior. They are used to display information to the user. They can be updated and change display properties. Setup of a passive element Start by creating a new file in your project and name it PassiveExample.cs. Then, add the following code to the file (see real example in the example project): using ConsoleAppVisuals; namespace MyApp { public class PassiveExample : PassiveElement { #region Fields // Add your custom fields here. #endregion #region Properties // Add overridden properties here. // You may also add your custom properties here. #endregion #region Constructor /// <summary> /// The natural constructor of the PassiveExample element. /// </summary> public PassiveExample(){} #endregion #region Methods // Add your custom methods here. #endregion #region Rendering /// <summary> /// Renders the PassiveExample element. /// </summary> protected override void RenderElementActions() { // This method is mandatory to render correctly your element. If not, an error will be thrown. // Add what the display code here. } #endregion } } Customize your new passive element Now let's look at the Element class. This class is the base class for all visual elements. It contains all the properties and methods that are necessary for the rendering of the elements. You can override some of these properties and methods to customize the behavior of your element (the PassiveElement class inherits from all the Element class attributes, so you can take the Element class as a model to create PassiveElements). The method that you can override are highlighted in yellow here: /* Copyright (c) 2024 Yann M. Vidamment (MorganKryze) Licensed under GNU GPL v2.0. See full license at: https://github.com/MorganKryze/ConsoleAppVisuals/blob/main/LICENSE.md */ namespace ConsoleAppVisuals.Models; /// <summary> /// The <see cref=\"Element\"/> class is an abstract class that represents an element that can be rendered on the console. /// </summary> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> public abstract class Element { #region Constants /// <summary> /// The default visibility of the elements when they are added to the window. /// </summary> /// <remarks> /// This value should not be changed. /// Each time the user adds an element to the window, it will try to toggle the visibility of the element. /// </remarks> private const bool DEFAULT_VISIBILITY = false; private const int DEFAULT_HEIGHT = 0; private const int DEFAULT_WIDTH = 0; private const int DEFAULT_MAX_NUMBER_OF_THIS_ELEMENT = int.MaxValue; #endregion #region Sealed Properties /// <summary> /// Gets the id number of the element. /// </summary> /// <remarks>This property is sealed. The ID of an element is automatically generated and managed by the <see cref=\"Window\"/> class.</remarks> public int Id { get; set; } /// <summary> /// Gets the visibility of the element. /// </summary> /// <remarks>This property is sealed. The visibility of an element is managed by the <see cref=\"ToggleVisibility\"/> method.</remarks> public bool Visibility { get; private set; } = DEFAULT_VISIBILITY; #endregion #region Properties /// <summary> /// Gets the type of the element. /// </summary> [Visual] public virtual ElementType Type { get; } /// <summary> /// Gets the height of the element, the vertical number of lines taken in the console. /// </summary> /// <remarks>This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific.</remarks> public virtual int Height { get; } = DEFAULT_HEIGHT; /// <summary> /// Gets the width of the element, the horizontal number of lines taken in the console. /// </summary> /// <remarks>This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific.</remarks> public virtual int Width { get; } = DEFAULT_WIDTH; /// <summary> /// Gets the placement of the element int the console. See the <see cref=\"Placement\"/> enum to know the possible values. /// </summary> /// <remarks>This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific.</remarks> public virtual Placement Placement { get; set; } /// <summary> ///Gets the text alignment of the text of the element. See the <see cref=\"TextAlignment\"/> enum to know the possible values. /// </summary> /// <remarks>This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific.</remarks> public virtual TextAlignment TextAlignment { get; set; } /// <summary> /// Gets the maximum number of this element that can be drawn on the console. /// </summary> /// <remarks>This property is marked as virtual. It is recommended to override this property in derived classes to make it more specific.</remarks> public virtual int MaxNumberOfThisElement { get; } = DEFAULT_MAX_NUMBER_OF_THIS_ELEMENT; /// <summary> /// Gets a line to place the element in the console. /// </summary> /// <exception cref=\"ArgumentOutOfRangeException\">Thrown when the placement of the element is invalid.</exception> /// <remarks>ATTENTION: This property is not marked as virtual. Override this property only to give it a constant value.</remarks> public virtual int Line { get { var elements = Window.Range(0, Id); return Placement switch { Placement.TopCenterFullWidth => elements .Where(e => e.Placement == Placement.TopCenterFullWidth && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopCenter && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopLeft && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopRight && e.Visibility) .Sum(e => e.Height), Placement.TopCenter => elements .Where(e => e.Placement == Placement.TopCenterFullWidth && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopCenter && e.Visibility) .Sum(e => e.Height), Placement.TopLeft => elements .Where(e => e.Placement == Placement.TopCenterFullWidth && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopLeft && e.Visibility) .Sum(e => e.Height), Placement.TopRight => elements .Where(e => e.Placement == Placement.TopCenterFullWidth && e.Visibility) .Sum(e => e.Height) + elements .Where(e => e.Placement == Placement.TopRight && e.Visibility) .Sum(e => e.Height), Placement.BottomCenterFullWidth => (Console.WindowHeight == 0 ? 0 : Console.WindowHeight - 1) - (Height - 1) - elements .Where(e => e.Placement == Placement.BottomCenterFullWidth && e.Visibility ) .Sum(e => e.Height), _ => throw new ArgumentOutOfRangeException(nameof(Placement), \"Invalid placement.\") }; } } #endregion #region Methods /// <summary> /// Toggles the visibility of the element. If the maximum number of this element is reached, an exception is thrown. /// </summary> /// <exception cref=\"InvalidOperationException\">Thrown when the maximum number of this element is reached.</exception> /// <remarks>This method is effectively sealed. The only way to change the visibility of an element is to use this method.</remarks> public void ToggleVisibility() { if (Visibility) { Visibility = false; } else if (Window.IsElementActivatable(Id)) { Visibility = true; } else { throw new InvalidOperationException( $\"Operation not allowed, too many elements of {GetType()} already toggled from the maximum of {MaxNumberOfThisElement}. Consider turning off one element of this type.\" ); } } #endregion #region Rendering /// <summary> /// Renders the element on the console. /// </summary> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> [Visual] public void RenderElement() { if (Visibility) { RenderOptionsBeforeHand(); RenderElementActions(); RenderOptionsAfterHand(); } } /// <summary> /// Defines the actions to perform when the element is called to be rendered on the console. /// </summary> /// <remarks>This method is marked as virtual. It is recommended to override this method in derived classes to make it more specific.</remarks> [Visual] protected virtual void RenderElementActions() { throw new NotImplementedException(\"Consider overriding this method in the derived class.\"); } /// <summary> /// Defines actions to perform before rendering the element on the console. /// </summary> [Visual] protected virtual void RenderOptionsBeforeHand() { } /// <summary> /// Defines actions to perform after rendering the element on the console. /// </summary> [Visual] protected virtual void RenderOptionsAfterHand() { } /// <summary> /// Renders the space taken by the element on the console. /// </summary> /// <param name=\"ignoreVisibility\">Whether to ignore the visibility of the element or not.</param> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> [Visual] public void RenderElementSpace(bool ignoreVisibility = false) { if (Visibility || ignoreVisibility) { Core.SaveColorPanel(); Core.SetForegroundColor(Core.GetRandomColor()); Core.WriteMultiplePositionedLines( false, TextAlignment.Center, Placement, true, Line, GetRenderSpace() ); Core.LoadSavedColorPanel(); } } /// <summary> /// Gets the space taken by the element on the console. /// </summary> /// <returns>The space taken by the element.</returns> /// <remarks>This method is marked as virtual. It is recommended to override this method in derived classes to make it more specific.</remarks> [Visual] protected virtual string[] GetRenderSpace() { var space = new string[Height]; for (int i = 0; i < space.Length; i++) { space[i] = new string(' ', Width); } return space; } /// <summary> /// Clears the space taken by the element on the console. /// </summary> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> [Visual] public void Clear() { Core.ClearMultiplePositionedLines(Placement, Line, GetRenderSpace()); } #endregion } Tip Depending on the element you want to create, you may not need to override all of these methods. You can override only the ones that are necessary for your element. However I highly recommend to override these: MaxNumberOfThisElement: Define the maximum number of this element that can be displayed on the screen simultaneously. RenderElementActions(): Describe how the element should be displayed. Height and Width: Depending on the element, you may want to override these properties to define the size of your element. Once your customization is done, you may use your element in your application just like a default element. Interactive elements Interactive elements are visual elements that have interactive behavior. They can be used to create buttons, prompts, menus, and other interactive elements. They can be updated and change display properties. But they also always give a response that the user can catch. The type of the response depends on the element. Setup of an interactive element Similar to the passive elements, you can create interactive elements but this time they inherit from the InteractiveElement class. This class contains all the properties and methods that are necessary for the rendering of the elements. You can override some of these properties and methods to customize the behavior of your element. Start by creating a new file in your project and name it InteractiveExample.cs. Then, create your new element following this template (see real example in the example project): using ConsoleAppVisuals; namespace MyApp { public class InteractiveExample : InteractiveElement<T> { #region Fields // Add your custom fields here. #endregion #region Properties // Add overridden properties here. // You may also add your custom properties here. #endregion #region Constructor /// <summary> /// The natural constructor of the InteractiveExample element. /// </summary> public InteractiveExample(){} #endregion #region Methods // Add your custom methods here. #endregion #region Rendering /// <summary> /// Renders the InteractiveExample element. /// </summary> protected override void RenderElementActions() { // This method is mandatory to render correctly your element. If not, an error will be thrown. // Add what the display code here. } #endregion } } Customize your new interactive element Now let's look at the InteractiveElement class. This class inherits from the Element class and contains all the properties and methods that are necessary for the rendering of the elements. You can override some of these properties and methods to customize the behavior of your element. Important To define a new interactive element, you must define the type of the response that the element will give. This type can be pretty much everything, but a classic type like int, string, ... is to prefer. In the example above, the type T is used. You can replace it with the type you want to use. The method and properties that you can override are the same as the PassiveElement class at some exceptions: MaxNumberOfThisElement: is set to one. RenderOptionsBeforeHand & RenderOptionsBeforeHand: cannot be modified. Two new methods are available and cannot be modified: SendResponse(): This method is called when the user interacts with the element. It is used to send a response to the window (highly recommended to see the example project ot understand its implementation). GetResponse(): This method is called when the user has interacted with the element. It is used to get the response from the user (you also have GetResponseHistory() to get the history of the responses). To understand how is defined the interaction response, I highlighted the two attributes that are used to define the response: /* Copyright (c) 2024 Yann M. Vidamment (MorganKryze) Licensed under GNU GPL v2.0. See full license at: https://github.com/MorganKryze/ConsoleAppVisuals/blob/main/LICENSE.md */ namespace ConsoleAppVisuals.Models; /// <summary> /// The <c>InteractionEventArgs</c> class is a generic class that represents the event arguments for the interactive elements. /// </summary> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> public class InteractionEventArgs<T> : EventArgs { #region Fields /// <summary> /// Gets the status after exiting the interactive element. See the <see cref=\"Status\"/> enumeration to know the possible values. /// </summary> /// <value>Status.Escaped : pressed escape, Status.Deleted : pressed backspace, Status.Selected : pressed enter</value> public Status Status { get; set; } /// <summary> /// Gets the <typeparamref name=\"T\"/> value of the response after exiting the interactive element. /// </summary> public T Value { get; set; } #endregion #region Constructor /// <summary> /// The <c>InteractionEventArgs</c> class is a generic class that represents the event arguments for the interactive elements. /// </summary> /// <param name=\"status\">The status of the exit from the menu.</param> /// <param name=\"value\">The value of the response after exiting the interactive element.</param> /// <remarks> /// For more information, consider visiting the documentation available <a href=\"https://morgankryze.github.io/ConsoleAppVisuals/\">here</a>. /// </remarks> public InteractionEventArgs(Status status, T value) { Status = status; Value = value; } #endregion } Where Status depends on the values of the Status enum and Value depends on the T type of the InteractiveElement you created. Once your customization is done, you may use your element in your application just like a default element. Visualize all elements available Now that you know how to create your own elements, you can check if they are available in the library. To do so, you can use built-in elements to display all the elements available in the library. Window.Open(); ElementsList passiveList = new ElementsList(ElementType.Passive); Window.AddElement(passiveList); Window.Render(passiveList); Window.Freeze(); Window.DeactivateElement(passiveList); Window.RemoveElement(passiveList); Window.Close(); Or target only interactive elements: Window.Open(); ElementsList interactiveList = new ElementsList(ElementType.Interactive); Window.AddElement(interactiveList); Window.Render(interactiveList); Window.Freeze(); Window.DeactivateElement(interactiveList); Window.RemoveElement(interactiveList); Window.Close(); Note You may repeat the same process for the ElementType.Default and ElementType.Animated to see all the elements available in the library. Note also that creating an AnimatedElement is just like creating a InteractiveElement but without sending a response. You may add a way for the user to press a key to skip the animation or to stop it. see the loading bars Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/create_font.html": {
    "href": "5-articles/create_font.html",
    "title": "Create and use fonts | ConsoleAppVisuals",
    "summary": "Create and use fonts Introduction This article will guide you through the process of creating your own font using the Font enum. ANSI_Shadow Lil_Devil Merlin Prerequisites .NET framework 6 or later ConsoleAppVisuals library: 3.0.0 or later Having looked at the project from the Introduction section Setup workspace We will take the example project of the Introduction section. As a reminder, here is the file structure of the project: Example_project <-- root └───MyApp ├───bin ├───MyApp.csproj └───Program.cs What are fonts In ConsoleAppVisuals, a font is a collection of ASCII characters on multiple lines associated to keys (e.g. abc123?!/). Some fonts are already available in the Font enum like the ANSI_Shadow, Bulbhead, Lil_Devil accessible using: Font.ANSI_Shadow, Font.Bulbhead, Font.Lil_Devil. Fonts are not available to all elements, for example, find it in the Title element: Title title = new Title(\"Example project\", 1, TextAlignment.Center, Font.ANSI_Shadow); To use a custom font, update the font variable and add the font path: Title title = new Title(\"Example project\", 1, TextAlignment.Center, Font.Custom, \"path/to/font\"); Caution In elements that use fonts: If you use built-in fonts, you MUST NOT specify a font path. If you use a custom font, you MUST specify a font path. Here is a recap of fonts work: flowchart LR A[ASCII files] -->|Parsed into| B[Font] C[config file] -->|Parsed into| B D[Element: Title] -->|1.Input a string| B B -->|2.Return styled text| D D -->|Render on| E[Console] Creating a font Structure Here is briefly the structure of a font for the ANSI_Shadow font: ANSI_Shadow ├───data │ ├───alphabet.txt │ ├───numbers.txt │ └───symbols.txt └───config.yml Config file The config.yml is the config file of the font. It contains the name, the author, the height of the characters and all the supported ones. Find an example below for the ANSI_Shadow font: name: ANSI Shadow author: Unknown height: 6 chars: alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz numbers: 0123456789 symbols: '?!:.,;/-_()[]%$^*@ ' Note Pay attention to the alphabet as the fonts are case-sensitive. In the alphabet category, mind to include both the upper and lower case letters. If your font does not support both, just copy and paste the letters twice. ANSI_Shadow font is a good example. Find it here Here, name, author, height and chars are required. They must not be null or empty. If the author is unknown, you can put Unknown by convention. In contrast, the alphabet, numbers and symbols are optional. If you don't have a specific category, you can let it empty and not include the ASCII file associated. An example of empty numbers: name: Bloody author: Unknown height: 10 chars: alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz numbers: symbols: ' ' Note It is highly recommended to have a ' ' (space) char in the symbols category for a readable font. By convention, the À, é, ü... should be included in the symbols category. ASCII files The ASCII files are the representation of the characters in the font. They are stored in the data folder. The name of the file must be the category name (e.g. alphabet.txt, numbers.txt, symbols.txt). Here is an example of the alphabet.txt file for the ANSI_Shadow font: ██████╗ @ ╚════██╗ @ ▄███╔╝ @ ▀▀══╝ @ ██╗ @ ╚═╝ @@ ██╗ @ ██║ @ ██║ @ ╚═╝ @ ██╗ @ ╚═╝ @@ @ ██╗ @ ╚═╝ @ ██╗ @ ╚═╝ @ @@ As you noticed: All characters are 6 lines high as specified in the config file. Each line ends with a @. The final line of a character ends with a @@. The width of the characters is not fixed. It can be different from one character to another. The @characters are aligned for a given character. One space is added between the characters and the @ to make the result styled text more readable. DO NOT USE @ CHAR IN YOUR FONT ITSELF. Points 1, 2, 3 are mandatory and will throw an exception if not respected. Points 4, 5, 6, 7 are optional but recommended for a better result. Note The characters are ordered following the order given by the chars categories in the config file. Using your font If you followed the previous steps rigorously, you should have a font ready to use. Consider the following project: Example_project <-- root └───MyApp ├───ANSI_Shadow │ ├───data │ │ ├───alphabet.txt │ │ ├───numbers.txt │ │ └───symbols.txt │ └───config.yml ├───bin ├───MyApp.csproj └───Program.cs Warning Do not forget to add at the beginning of your Program.cs file the following using statements: using ConsoleAppVisuals; using ConsoleAppVisuals.PassiveElements; using ConsoleAppVisuals.InteractiveElements; using ConsoleAppVisuals.Enums; using ConsoleAppVisuals.Models; To check that ANSI_Shadow is working, update the Program.cs file: Title title = new Title(\"Example project\", 1, TextAlignment.Center, Font.Custom, \"../ANSI_Shadow/\"); The path here leads to the font directory. The library will automatically target or the config.yml file and the data folder. If no error was thrown, that means that the font is working. You can now use it. Here is how to manipulate the styler: Creation: TextStyler styler = new TextStyler(Font.Custom, \"ANSI_Shadow/\"); Usage (String -> Styled text): string[] styledText = styler.Style(\"Hello, world!\"); Display: Core.WritePositionedStyledText(styledText); For more information about the TextStyler class and WritePositionedStyledText() method, please refer to the References section. Contributing If you want to contribute to the library by adding a font, you can do so by creating a pull request on the GitHub repository. Here are the steps to follow: Fork the repository and create a new branch for your new font. Add your font to the src/ConsoleAppVisuals/fonts directory. Make sure to match all the requirements for the font defined above in the article. Add your font name to the Font enum (src/ConsoleAppVisuals/enums/Font.cs) and precise the author and the height of the characters in the metadata comments. Submit a pull request to the dev branch of the repository. After these steps, your font will be reviewed and merged into the library to be available for everyone. Resources Test fonts Figlet Fonts collection Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/csharp_for_vscode.html": {
    "href": "5-articles/csharp_for_vscode.html",
    "title": "C# for Visual Studio Code | ConsoleAppVisuals",
    "summary": "C# for Visual Studio Code Introduction This guide will help you set up your development environment for C# using Visual Studio Code. It will guide you through the installation of the .NET SDK, Visual Studio Code, and the C# extension for a complete setup. Install .NET SDK The .NET SDK is a free, open-source development platform for building many different types of applications. It includes the C# compiler, the .NET runtime, and the ASP.NET Core runtime. Download the .NET SDK installer from the official website. Run the installer and follow the instructions. Once installed, open a new terminal and run the following command to verify the installation: dotnet --version Install Visual Studio Code Visual Studio Code is a free source code editor developed by Microsoft for Windows, Linux and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring. Windows MacOS Linux Download the Visual Studio Code installer from the official website. Run the installer and follow the instructions (Consider adding Open with Code action to Windows Explorer context menu). Once installed, open Visual Studio Code. Click on File > Auto Save to enable the auto-save feature. Download the Visual Studio Code installer from the official website or use the following command in the terminal: brew install --cask visual-studio-code (Skip if used brew) Open the downloaded file and drag the Visual Studio Code icon to the Applications folder. Once installed, open Visual Studio Code. Open the Command Palette (Ctrl+Shift+P) and type shell command to find the Shell Command: Install 'code' command in PATH command. Click on File > Auto Save to enable the auto-save feature. Download the Visual Studio Code installer from the official website (available as .deb or .rpm). Or check the Visual Studio Code Insiders version for more availability. Run the installer and follow the instructions. Once installed, open Visual Studio Code. Open the Command Palette (Ctrl+Shift+P) and type shell command to find the Shell Command: Install 'code' command in PATH command. Click on File > Auto Save to enable the auto-save feature. Install the C# extension The C# extension for Visual Studio Code adds support for C# to Visual Studio Code, including features such as syntax highlighting, IntelliSense (code completion), and debugging. Find them here: The extensions to install are: C# C# Extensions C# Dev Kit Bonus: Developer Tools The following extensions are not required but can be useful: CSharpier tokyo-night Reload Open a terminal and run the following command to install CSharpier (code formatter): dotnet tool install --global csharpier Then, open KeyboardShortcuts: Search for Format Document and set the keybinding to Ctrl+S (or Cmd+S on MacOS) Finally, open a C# file and press Ctrl+S (Cmd+S on MacOS) to format the document. Resources To go further Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/debugging.html": {
    "href": "5-articles/debugging.html",
    "title": "Debugging in ConsoleAppVisuals | ConsoleAppVisuals",
    "summary": "Debugging in ConsoleAppVisuals Introduction Debugging is a crucial part of software development. It is the process of identifying and removing errors from a computer program. We put a lot of effort into making debugging easier and more efficient in ConsoleAppVisuals. This article will guide you through the debugging tools and resources available in ConsoleAppVisuals to help you overcome your challenges. Pre-requisites Basic knowledge of C# programming language A code editor (Visual Studio, Visual Studio Code, etc.) ConsoleAppVisuals library installed (v3.3.0 or later) In-code tools ElementsDashboard The first tool that we will discuss is the ElementsDashboard. It is a debugging tool that allows you to visualize the elements added to the Window. they are presented like a list of elements with their properties. This tool is very useful when you want to see the updates of the elements properties in real-time after activating, deactivating or modifying them. Window.Open(); ElementsDashboard dashboard = new ElementsDashboard(Placement.TopCenter, false); Window.AddElement(dashboard); Window.Render(dashboard); Window.Freeze(); Window.Close(); Tip The arguments available for the ElementsDashboard are: Placement - The position of the dashboard on the window to place it at a convenient location. (see Placement enum for more details) RoundedCorners - A boolean value that indicates if the dashboard should have rounded corners. (purely aesthetic) ElementsList The ElementsList is another debugging tool that allows you to visualize the elements inherited from the Element, PassiveElement or InteractiveElement classes. It lets you see their type and project location (library or your own). This tool is very useful when you want to add your custom element and see if they are recognized by the library. Window.Open(); ElementsList list = new ElementsList(ElementType.Default, Placement.TopCenter, false); Window.AddElement(list); Window.Render(list); Window.Freeze(); Window.Close(); Tip The arguments available for the ElementsList are: ElementType - The type of elements to display in the list. (see ElementType enum for more details) Placement - The position of the list on the window to place it at a convenient location. (see Placement enum for more details) RoundedCorners - A boolean value that indicates if the list should have rounded corners. (purely aesthetic) Core.WriteDebugMessage() The Core.WriteDebugMessage() method is a simple debugging tool that allows you to print a debug message in the console. This message overrides whatever is currently in the console and is useful when you want to display information without creating an EmbedText for example (it is also a quick alternative to the Console.WriteLine() method). Window.Open(); // Here the info are dummy but you may pass real elements or window variables Core.WriteDebugMessage(Placement.TopRight, \"h: 12\", \"w: 12\", \"x: 0\", \"y: 0\"); Window.Freeze(); Window.Close(); Tip The arguments available for the Core.WriteDebugMessage() are: Placement - The position of the message on the window to place it at a convenient location. (values can only be TopLeft, TopCenter or TopRight) params string[] - The information to display in the message. (you can pass as many strings as you want) An empty string will be displayed as a blank space. Issues Before getting crazy over your code, try to find a related issue in the library that tackles the subject you are struggling with. If you can't find any, feel free to open an issue on the GitHub repository and we will be happy to help you. Note As the v3 of the project is still in development, no issues have been reported yet. Be the first! References If you struggle with the behavior of a specific class or method, you can refer to the detailed documentation to find the information you need. The documentation is updated regularly and contains all the information you need to use the library. Or simply redo the tutorials to get a better understanding of the library. Examples If you are looking for concrete examples to help you understand how to use the library in real use cases, you can refer to the examples section. The examples are updated regularly and cover a wide range of use cases. Source code Finally, if none of the above solutions work, or if you are just curious, you can always refer to the source code. Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/index.html": {
    "href": "5-articles/index.html",
    "title": "Table of content | ConsoleAppVisuals",
    "summary": "Table of content On this section, you will find articles related to the use of the ConsoleAppVisuals library and general articles for C# projects. Regarding the library, Create your own visual element Create and use font Debugging using the library Regarding C# projects, Create your project documentation Publish a library C# for Visual Studio Code Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "5-articles/publish_library.html": {
    "href": "5-articles/publish_library.html",
    "title": "Publish your library | ConsoleAppVisuals",
    "summary": "Publish your library Introduction This article will guide you through the process of publishing a package on NuGet.org and GitHub packages using GitHub actions. This will enable you to share your library with the world. NuGet is a package manager for .NET that allows you to share your code with the world. It is a great way to share your library with the community and to make it easy for others to use your code. Prerequisites Having looked at the project from the Introduction section .NET 6.0 or later NuGet account, preferably for you on an outlook email address Github account Put your project on GitHub to be able to use GitHub actions Setup workspace We will take the example project of the Introduction section and we will publish it on NuGet.org and GitHub packages as an example. As a reminder, here is the file structure of the project: Example_project <-- root └───MyApp ├───bin ├───MyApp.csproj └───Program.cs README.md & LICENSE This part is not mandatory but highly recommended. Readme files are a great way to introduce your project to the world. It is the first thing people will see when they visit your repository. It is a good practice to include a README file in your project. Learn more The license file is also important. It is a way to tell people what they can and cannot do with your project. The default license is the MIT license that let the user a lot a freedom with your code. Learn more Here is an example of a README file: # MyApp > A simple console app for demonstration purposes ## Installation Describe how to install your project ## Usage Describe how to use your project ## Contributing Describe how to contribute to your project ## License MIT And here is an example of a LICENSE file: MIT License Copyright (c) 2024 YourName Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. MyApp.csproj C# project files (.csproj) are the files that contain all the information about your project. It is where you define the target framework, the dependencies, the version of your project, and much more. Learn more Here is a template for a .csproj file made for publishing a package: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <!-- Project Info--> <TargetFrameworks>net8.0</TargetFrameworks> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> </PropertyGroup> <PropertyGroup> <Title>MyApp</Title> <!-- Change this by the name of your package, it must be unique --> <PackageId>MyFirstApp1234</PackageId> <!-- Change this by the name of the publisher on nuget.org --> <Authors>YourNugetAccountName</Authors> <!-- Change this by the description of your package --> <Description>Descriptive description to describe the package use</Description> <PackageLicenseExpression>MIT</PackageLicenseExpression> <!-- Change this by the tags of your package --> <PackageTags>Test, Discovery</PackageTags> <!-- Change this by the url of your repository on GitHub --> <RepositoryUrl>https://github.com/MorganKryze/ConsoleAppVisuals</RepositoryUrl> <RepositoryType>git</RepositoryType> <PackageReadmeFile>README.md</PackageReadmeFile> <PackageLicenseFile>LICENSE</PackageLicenseFile> </PropertyGroup> <PropertyGroup> <!-- NuGet Package Explorer health standards --> <EmbedUntrackedSources>true</EmbedUntrackedSources> <PublishRepositoryUrl>true</PublishRepositoryUrl> <IncludeSymbols>true</IncludeSymbols> <SymbolPackageFormat>snupkg</SymbolPackageFormat> </PropertyGroup> <!-- This condition let you build locally, and on a test github action without issue. Only the action CD.yml (see later) will enable this condition. this is part of the package health standards for deterministic build. --> <PropertyGroup Condition=\"'$(GITHUB_ACTIONS)' == 'true' AND '$(GITHUB_ACTION)' == 'publish'\"> <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild> </PropertyGroup> <PropertyGroup> <!-- Publishing Settings --> <GenerateDocumentationFile>true</GenerateDocumentationFile> <PublishRelease>true</PublishRelease> <PackRelease>true</PackRelease> </PropertyGroup> <ItemGroup> <!-- Assets load--> <!-- MANDATORY: give the filepath to the files declared --> <!-- OPTIONAL: give a custom path to store them inside your package --> <None Include=\"..\\README.md\" Pack=\"true\" PackagePath=\"\"/> <None Include=\"..\\LICENSE\" Pack=\"true\" PackagePath=\"\"/> </ItemGroup> <ItemGroup> <!-- Dependencies if you have--> <PackageReference Include=\"yamldotnet\" Version=\"15.1.2\" /> </ItemGroup> </Project> Consider checking that the filepaths are accurate. Here is the file structure of the project updated: Example_project <-- root ├───MyApp │ ├───bin │ ├───MyApp.csproj │ └───Program.cs ├───LICENSE └───README.md Learn more about making your project deterministic. Build the project Now we will be able to build your project including the metadata for the package. cd MyApp dotnet build -c Release Optional: You can also run the tests to make sure everything is working as expected by creating a local package: dotnet pack -c Release You will then find the NuGet package in the bin/Release folder of your project. Publish your package API keys API keys are a way to authenticate yourself to a service. Using those keys will enable you to create automation to deploy and publish packages for example. You will need to create an API key for NuGet and GitHub. Go to Nuget.org and sign in. Then jump to the API keys page and create a new API key. Copy it to your clipboard (I recommend you to store it somewhere safe afterward like in a password manager). Important Set your API key as a secret of your repository on GitHub and name it NUGET_API_KEY. Paste your API key in the value field. To create a GitHub personal API key, go to this page and create a classic token. You will need to check the \"write:packages\" scope. Copy it to your clipboard (I recommend you to store it somewhere safe afterward like in a password manager). Automation Now we will set up a github action to automate the process of publishing your package. Create two folders in the root of your project: .github then workflows inside. Create a new file in the .github/workflows folder and name it CD.yml. name: Publish package on: push: tags: - 'v[0-9]+.[0-9]+.[0-9]+' jobs: build: runs-on: ubuntu-latest timeout-minutes: 15 steps: - name: Checkout uses: actions/checkout@v3 with: fetch-depth: 0 - name: Verify commit exists in origin/main run: git branch --remote --contains | grep origin/main - name: Extract release notes run: | git log --pretty=format:'%d %s' ${GITHUB_REF} | perl -pe 's| \\(.*tag: v(\\d+.\\d+.\\d+(-preview\\d{3})?)(, .*?)*\\)|\\n## \\1\\n|g' > RELEASE-NOTES - name: Set VERSION variable from tag run: echo \"VERSION=${GITHUB_REF/refs\\/tags\\/v/}\" >> $GITHUB_ENV - name: Pack library run: dotnet pack <your_path_from_your_project_file.csproj> /p:Version=${VERSION} /p:ContinuousIntegrationBuild=true --output . env: GITHUB_ACTIONS: true GITHUB_ACTION: 'publish' - name: Push to GitHub Packages run: dotnet nuget push <name_of_your_app>.${VERSION}.nupkg --source https://nuget.pkg.github.com/<nuget_username>/index.json --api-key ${GITHUB_TOKEN} env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} - name: Push to NuGet.org run: dotnet nuget push <name_of_your_app>.${VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}} Important Check that you updated: <your_path_from_your_project_file.csproj> by the path to your .csproj file <name_of_your_app> by the name of your app <nuget_username> by your NuGet username (on the same line as the dotnet nuget push command) Then, commit your changes and push them to your repository. Finally, create a new release and add a tag to it as follow \"vX.X.X\" where X is a number representing the version of your package. Learn more Tip Wait a few minutes and you will find your package on NuGet.org and GitHub packages, you will be notified by email. Clean up If that project was indeed for you for demo purposes, you cannot delete it from NuGet.org, but you can hide it by unlisting it: Go to Manage Packages > select the package > click on the Edit button > Listing category > unchecked the \"List in search results\" checkbox > Save. Bonus: Prefix ID To protect the uniqueness of your package name, you can reserve a prefix for your package. This will prevent someone else from using the same name as your package. That way, I reserved \"ConsoleAppVisuals\" and \"ConsoleAppVisuals.*\" (meaning that \"ConsoleAppVisuals\" and \"ConsoleAppVisuals.MyApp\" will be reserved for example). To do so, you only need to send an email to account@nuget.org with the subject \"Package ID prefix reservation\" and give your NuGet username (or organization, or other name of collaborators) and the prefixes you want to reserve. The criteria are given in this page. Resources Official NuGet documentation Main Source Recap Deterministic Builds Package ID Have a question, give a feedback or found a bug? Feel free to open an issue or start a discussion on the GitHub repository."
  },
  "6-legacy/homescreen.html": {
    "href": "6-legacy/homescreen.html",
    "title": "General displays for the home screen | ConsoleAppVisuals",
    "summary": "General displays for the home screen Display a title By default, no title will be displayed as no title has been set. You can set a title with the SetTitle method and then display it with the WriteTitle method. Core.SetTitle(\"Example\", 2); Core.WriteTitle(); Console.ReadKey(); //[optional]: just to keep the console clean Demo with an Example Display a banner Now that we have seen the title, let's see how to display a banner. You may use the default arguments or define your own if you prefer an instant result, specify if you want to display the header or the footer or display your own banner. Core.SetTitle(\"Example\", 2); Core.WriteTitle(); Core.WriteHeader(); Console.ReadKey(); //[optional]: just to keep the console clean Demo with default arguments for the header To customize the banner, you can change the arguments or change the default header and footer with the SetDefaultHeader or SetDefaultFooter methods. Core.SetDefaultHeader((\"Left\", \"Top\", \"Right\")); Core.WriteHeader(true); Core.WriteFooter(true, (\"Left\", \"Top\", \"Right\")); Console.ReadKey(); Demo with custom arguments for the header Easy display The WriteFullScreen method is the easiest way to display a banner and a title. It will display the banner and the title with the default arguments. Here is an example of what this method replaces: Core.WriteFullScreen(\"Example\"); // Instead of: // Core.SetTitle(\"Example\", 2); // Core.WriteTitle(); // // Core.SetDefaultHeader((\"Left\", \"Top\", \"Right\")); // Core.SetDefaultFooter((\"Left\", \"Top\", \"Right\")); // Core.WriteHeader(); // Core.WriteFooter(); // // Core.ClearContent();"
  },
  "6-legacy/index.html": {
    "href": "6-legacy/index.html",
    "title": "Getting started | ConsoleAppVisuals",
    "summary": "Getting started Caution This part of the documentation exists for legacy purposes. All 3.x.x versions and above are not compatible with the instructions on this section. Outline Welcome to the docs, here you will find all the information you need to use this library. You will find the following topics about the library: Homescreen visuals Write on the console Specific methods And finally, you will find the precise documentation in \"References\" section. Note Feel free to contribute to the project by forking it and making a pull request or open an issue if you encounter a bug. Structure The library is composed of 4 main classes: ConsoleAppVisuals ├───models │ ├───Position.cs │ ├───Placement.cs │ └───FontYamlFile.cs ├───Core.cs ├───Extensions.cs ├───Matrix.cs ├───Table.cs ├───TextStyler.cs └───Usings.cs Usings.cs This file contains the different usings of the library. It is used to import the different classes of the library and enable them globally in the library. Core.cs This class is the core of the library. It contains the methods to display the different visuals and variables. Extensions.cs This class contains different extensions methods for strings and tuples. With Position.cs and Placement.cs, it belongs to the tools classes. TextStyler.cs This class is used to style the text. It contains the methods to apply a specific style to a text. Often used for the title. It may be useful to create your own style. Table.cs This class is used to create a table. It may be useful to display data in a table on the screen. Matrix.cs This class is used to create a matrix. It may be useful to display data in a matrix on the screen. Position.cs This class is used to define any position defined by an X and Y coordinate. It may be used in cases like matrix selectors for example. Placement.cs This class is used to define the placement of a text in the console. It may be useful to indicate where to place a text in a console, or to define the position of a text in a larger string. FontYamlFile.cs This class is used to define a font from a yaml file. It may be useful to create your own font."
  },
  "6-legacy/specific.html": {
    "href": "6-legacy/specific.html",
    "title": "Specific methods | ConsoleAppVisuals",
    "summary": "Specific methods Scrolling menu The ScrollingMenuSelector is a special block that allows you to display a menu with a scrolling effect. You may specify the question and the different choices. Core.WriteFullScreen(\"Example\", true); Core.ScrollingMenuSelector(\"New question asked ?\", 0, Placement.Center, null, \"Option 1\", \"Option 2\", \"Option 3\"); Console.ReadKey(); Demo with scrolling menu Note To get the selected option and the key input, refer to the example project. Number selector The ScrollingNumberSelector is a special block that allows you to display a scrolling element with a number. You may define the minimum and maximum values, the step and the initial value. Core.WriteFullScreen(\"Example\", true); Core.ScrollingNumberSelector(\"Please choose a number\", 10, 50, 25, 5); Console.ReadKey(); Demo with number selector Note To get the selected option and the key input, refer to the example project. Prompt The WritePrompt let you ask a prompt to the user and get the input. You may define the question and the default value. Core.WriteFullScreen(\"Example\", true); Core.WritePrompt(\"Is your name John Doe ?\", \"John Doe\"); Console.ReadKey(); Demo with prompt Table selector First, you need to create a Table object giving the lines and optionally the headers just as in the example below. List<string> headers = new () {\"id\", \"name\", \"major\", \"grades\"}; List<string> student1 = new () {\"01\", \"Theo\", \"Technology\", \"97\"}; List<string> student2 = new () {\"02\", \"Paul\", \"Mathematics\", \"86\"}; List<string> student3 = new () {\"03\", \"Maxime\", \"Physics\", \"92\"}; List<string> student4 = new () {\"04\", \"Charles\", \"Computer Science\", \"100\"}; Table<string> students = new (headers, new () {student1, student2, student3, student4}); The ScrollingTableSelector is a special block that allows you to display the table with a selector. students.ScrollingTableSelector(true, false, \"Add student\"); Demo with table selector Note Once you created the table, you can add, remove or update the data using the methods provided by the Table class (AddLine, RemoveLine, UpdateLine). Here is an example of a table of how to use them: students.AddLine(new () {\"05\", \"John\", \"Biology\", \"95\"}); students.RemoveLine(4); students.UpdateLine(3, new () {\"04\", \"Charles\", \"Computer Science\", \"55\"}); students.Count You may also use the SetRoundedCorners method to set the rounded corners to true or false for the tables. students.SetRoundedCorners(true); Matrix display First, you need to create a Matrix object giving the data just as in the example below. List<int?> firstRow = new() { 1, null, 2, 7, 9, 3 }; List<int?> secondRow = new() { 4, 5, 6, 8, null, 2 }; List<int?> thirdRow = new() { 7, 8, null, 3, 4, 5 }; List<int?> fourthRow = new() { null, 2, 3, 4, 5, 6 }; List<List<int?>> data = new() { firstRow, secondRow, thirdRow, fourthRow }; Matrix<int?> matrix = new(data); The WriteMatrix is a special block that allows you to display the matrix. This is only visual, you can't select any element. matrix.WriteMatrix(Placement.Center); Console.ReadKey(); Note Once you created the matrix, you can add, remove or update the lines using the methods provided by the Matrix class (AddLine, RemoveLine, UpdateLine) but also the elements using the RemoveElement and UpdateElement methods. Here is an example of a matrix of how to use them: matrix.AddLine(new () {2, 5, 7, 9, 3, 6}); matrix.RemoveLine(3); matrix.UpdateLine(2, new () {3, 6, 8, 9, null, 2}); matrix.RemoveElement(new Position(2, 2)); matrix.UpdateElement(new Position(3,1), 7); matrix.GetElement(new Position(2,1)); matrix.Count You may also use the SetRoundedCorners method to set the rounded corners to true or false for the matrix. matrix.SetRoundedCorners(true); Loading bar The LoadingBar is a special block that allows you to display a loading bar. You may define the text to display while loading. Core.WriteFullScreen(\"Example\", true); Core.LoadingBar(); Console.ReadKey(); Demo with loading bar Lawful loading bar The ProcessLoadingBar is a special block that allows you to display a loading bar with a text and a true loading bar. You may define the text to display while loading. Core.WriteFullScreen(\"Example\", true); var percentage = 0f; var t_Loading = new Thread(() => Core.ProcessLoadingBar(\"[Lawful loading...]\",ref percentage)); // Create a Thread to run the loading bar on the console t_Loading.Start(); while (percentage <= 1f) { Thread.Sleep(100); percentage += 0.1f; // Simulate a loading process } t_Loading.Join(); // Wait for the Thread to finish Console.ReadKey(); Demo with lawful loading bar Exit Last but no least, to exit the application, you can use the ExitProgram method. It will display a message and exit the application. Core.WriteFullScreen(\"Example\", true); Core.ExitProgram(); Console.ReadKey(); Demo with exit message"
  },
  "6-legacy/write.html": {
    "href": "6-legacy/write.html",
    "title": "Writing on the console | ConsoleAppVisuals",
    "summary": "Writing on the console Write a text in the console using placement The WritePositionedString method is the most basic method of the library. It allows you to write a string in the console, with the possibility to specify the placement of the string within the width of the console. Core.WriteFullScreen(\"Example\"); Core.WritePositionedString(\"On the left\", Placement.Left, default, 9, default); Core.WritePositionedString(\"Centered\", Placement.Center, default, 10, default); Core.WritePositionedString(\"On the right\", Placement.Right, default, 11, default); Console.ReadKey(); Demo with placed strings Including continuous printing In addition to the placement, you can also specify if you want to print the string continuously or not. If you do, the string will be printed character by character, with a delay between each character. You may also interrupt the printing by pressing any key. Core.WriteFullScreen(\"Example\"); Core.WriteContinuousString(\"Hello World! Welcome to this beautiful app.\", 10); Console.ReadKey(); Demo with continuous printing Including Multiple Lines If you want to write a text with multiple lines, you can use the WriteParagraph method like this: Core.WriteFullScreen(\"Example\"); Core.WriteParagraph(default, default, \"C# is a general-purpose, multi-paradigm programming language encompassing strong typing,\",\"lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based),\",\" and component-oriented programming disciplines.\", \"\", \"Press [Enter] to continue...\"); Console.ReadKey(); Demo with paragraph Include Styled Text You can also use the WritePositionedStyledText method to write a styled text in the console. You may specify the placement, the color, the background color and the font of the text. The StyleText method allows you to style a string according to the font selected. Core.WriteFullScreen(\"Example\"); Core.WritePositionedStyledText(Core.StyleText(\"Hello World!\")); Console.ReadKey(); Including color You can also specify the color of the elements and choose to apply the negative color to the text. Here are two example : Core.WriteFullScreen(\"Example\"); Core.ChangeForeground(ConsoleColor.Green); Core.WritePositionedString(\"Hello World! Welcome to this beautiful app.\", Placement.Center, false, 10); Core.ApplyNegative(true); Core.WritePositionedString(\"Press any key to exit.\", Placement.Center, true, 12); Core.ApplyNegative(false); Console.ReadKey(); Demo with color Note You may use the ChangeBackground method to change the background color as well. Clear lines Based on a line index and a number, you can clean several lines of your console. This is useful if you want to clean a specific part of your console. This way, you can choose to clean only the lines you want, and not the entire console. Core.ClearLine(10); // Clears the line 10 Core.ClearMultipleLines(10, 2); // Clears the lines 10 and 11 Core.ClearContent(); // Clears the space between the two banners, header and footer Core.ClearWindow(); // Clears the whole window with a continuous effect Some properties Heights You may access to some useful properties concerning the heights of the visuals as: Core.TitleHeight; // The height in the console of the title Core.HeaderHeight; // The height of the header Core.FooterHeight; // The height of the footer Core.ContentHeight; // The height of the content Catch updates You will be able to catch if the screen has been resized with the UpdateScreen property. It will return a boolean indicating if the screen has been resized or not, or if the colors of the console has been updated. Then you may use the UpdateScreen method to update the screen to the new values and reload the page. if (IsScreenUpdated) { UpdateScreen(); } Selection cursor You can also change the cursor character for every menu with the SetCursor method by precising the onward and backward characters. Core.SetCursor('>', '<'); Own font You may create your own font by creating a font file following the format specified in the source code (it includes, the three .txt files and the .yaml file). Then, you can use the SetFont method to globally set the font of your project. Core.SetFont(\"/path/to/your/font/folder/\"); Warning By default, the font is only used for the title. If you want other text to use the font, you have to do it manually using the WritePositionedStyledText method (for an array) or a simple Console.WriteLine is enough for a styled string. Color panel Finally, you may use the GetColorPanel property to get the color panel of the console. var foregroundColor = Core.GetColorPanel.Item1;"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the docs | ConsoleAppVisuals",
    "summary": "Welcome to the docs Table of contents Welcome to the documentation of the ConsoleAppVisuals library. This is a simple and easy-to-use library that allows you to create visual elements in the console. Here are all the resources available: Introduction: find the basic concepts and the first steps into the library to learn how to use it. Elements: find all the visual elements available in the library with their description. References: find all methods, properties and classes with their description and all arguments available. Examples: find some examples to learn how to use the library in concrete use cases. Articles: find some additional library-related articles. Legacy: find the outdated documentation of the library for the versions 2.x.x and below. Roadmap The library is still in active development. The next feature and bug resolutions are listed in the Project section of the GitHub repository. Supported .NET versions Version Supported net9.x ✅ net8.x ✅ net7.x ✅ net6.x ✅ < net6.x ❌ Security Policy Consider reading our SECURITY policy to know more about how we handle security issues and how to report them. You will also find the stable versions of the project. Acknowledgments Consider reading the ACKNOWLEDGMENTS file. It's a testament to the collaborative effort that has gone into improving and refining our library. We're deeply grateful to all our contributors for their invaluable input and the significant difference they've made to the project. It also lists the open source projects that have been used to build this library until now. Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. To do so, follow the steps described in the CONTRIBUTING file. We are always open for feedback and discussions. If you are using our library and want to share your use case, or if you have any suggestions for improvement, please feel free to open an issue or open a discussion on our GitHub repository. Your input helps us understand possible use cases and make necessary improvements. Do not hesitate to star and share the project if you like it!"
  }
}